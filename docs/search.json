[
  {
    "objectID": "biostatistics.html",
    "href": "biostatistics.html",
    "title": "Biostatistics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nMSc Epidemiology: Thesis\n\n\nA Retrospective Analysis of German Non‚ÄêSpecific Lower Back Pain Patients and their Patient Pathway Before and After Emergency Department Treatment\n\n\n\n\n\n1 Sep, 2023\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "maps/uk_maps.html",
    "href": "maps/uk_maps.html",
    "title": "UK Population",
    "section": "",
    "text": "1. R code\n\n\nThumbnail\n\n\nShow codeif(!require(tidyverse)){install.packages(\"tidyverse\");library(tidyverse)}\nif(!require(ggplot2)){install.packages(\"ggplot2\");library(ggplot2)}\nif(!require(ggrepel)){install.packages(\"ggrepel\");library(ggrepel)}\nif(!require(sf)){install.packages(\"sf\");library(sf)}\nif(!require(eurostat)){install.packages(\"eurostat\");library(eurostat)}\nif(!require(classInt)){install.packages(\"classInt\");library(classInt)}\nif(!require(giscoR)){install.packages(\"giscoR\");library(giscoR)}\nif(!require(cartogram)){install.packages(\"cartogram\");library(cartogram)}\nif(!require(rayshader)){install.packages(\"rayshader\");library(rayshader)}\nif(!require(sysfonts)){install.packages(\"sysfonts\");library(sysfonts)}\nif(!require(showtext)){install.packages(\"showtext\");library(showtext)}\n\n# Define Fonts \n\n\nsysfonts::font_add_google(\"Roboto Mono\")\nshowtext::showtext_auto()\n\nget_polygon &lt;- function() {\n  # st_area returns square meters so we get square km by dividing the result by 1000\n  df$area_sqkm &lt;- as.numeric(sf::st_area(df) / 1000000)\n  \n  deu_polygon &lt;- df |&gt;\n    dplyr::mutate(pop_per_sqr_km = values / area_sqkm)\n  return(deu_polygon)\n}\n\ncustom_theme &lt;- function() {\n  theme_minimal() +\n    theme(\n      text = element_text(size = 12),\n      axis.line = element_blank(),\n      axis.text.x = element_blank(),\n      axis.text.y = element_blank(),\n      axis.ticks = element_blank(),\n      axis.title.y = element_blank(),\n      legend.position =  \"bottom\",\n      legend.text = element_text(size = 30, color = \"grey20\"),\n      legend.title = element_text(size = 40, color = \"grey20\"),\n      legend.spacing.y = unit(0.25, \"cm\"),\n      legend.spacing.x = unit(0.25, \"cm\"),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      plot.margin = unit(\n        c(t = 0, r = 0, b = 0, l = 0), \"lines\"\n      ),\n      plot.background = element_rect(fill = \"#f5f5f2\", color = NA),\n      panel.background = element_rect(fill = \"#f5f5f2\", color = NA),\n      legend.background = element_rect(fill = \"#f5f5f2\", color = NA),\n      panel.border = element_blank(),\n    )\n}\n\n# colors\ncols &lt;- rev(c(\n  \"#004225\", \"#2e8b57\",\n  \"#4682b4\", \"#5f9ea0\",\n  \"#20b2aa\", \"#008b8b\",\n  \"#b0e0e6\"\n))\n\n\n\nmake_polygon_map &lt;- function(polygon, theme) {\n  p1 &lt;-\n    ggplot(polygon) +\n    geom_sf(aes(fill = pop_per_sqr_km),\n            color = \"grey20\",\n            size = .1\n    ) +\n    scale_fill_gradientn(\n      name = \"\",\n      colours = cols,\n      breaks = breaks,\n      labels = round(breaks, 0),\n      limits = c(vmin, vmax)\n    ) +\n    guides(fill = guide_legend(\n      direction = \"horizontal\",\n      keyheight = unit(1.15, units = \"mm\"),\n      keywidth = unit(15, units = \"mm\"),\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = .5,\n      nrow = 1,\n      byrow = T,\n      reverse = F,\n      label.position = \"bottom\"\n    )) +\n    theme() +\n    labs(\n      y = \"\",\n      subtitle = \"\",\n      x = \"\",\n      title = \"\",\n      caption = \"\"\n    )\n  return(p1)\n}\n\n\n# Label Regions -----------------------------------------------------------\n\nlabel_regions &lt;- function(coordinates) {\n  ggrepel::geom_text_repel(coordinates[1:5, ],\n                           mapping = aes(x = long, y = lat, label = NAME_LATN),\n                           colour = \"grey20\",\n                           fontface = \"bold\",\n                           size = 10,\n                           segment.colour = \"grey20\",\n                           segment.alpha = .9,\n                           segment.linetype = 3,\n                           segment.size = .25,\n                           nudge_x = .95,\n                           nudge_y = .15,\n                           direction = \"x\"\n  )\n}\n\n\n\n\n\nmake_point_map &lt;- function(coordinates, labels) {\n  p2 &lt;-\n    ggplot() +\n    geom_sf(\n      data = polygon,\n      fill = \"transparent\",\n      color = \"grey20\",\n      size = .1\n    ) +\n    geom_sf(\n      data = points,\n      mapping = aes(\n        size = pop_1000s,\n        geometry = geometry\n      ), color = cols[5],\n      alpha = .5\n    ) +\n    scale_size(\n      breaks = breaks,\n      range = c(1, 10),\n      labels = round(breaks, 0),\n      limits = c(vmin, vmax),\n      name = \"\"\n    ) +\n    guides(\n      color = \"none\",\n      size = guide_legend(\n        direction = \"vertical\",\n        title.position = \"top\",\n        title.hjust = 0.5,\n        label.hjust = 0,\n        nrow = 1,\n        byrow = F,\n        reverse = F,\n        label.position = \"bottom\"\n      )\n    ) +\n    custom_theme() +\n    labs(\n      y = \"\",\n      subtitle = \"\",\n      x = \"\",\n      title = \"\",\n      caption = \"\"\n    )\n  \n  # Add label regions only if labels = TRUE\n  if (labels) {\n    p2 &lt;- p2 + label_regions(coordinates)\n  }\n  \n  return(p2)\n}\n\n\nget_cartogram &lt;- function(df) {\n  deu_cart &lt;- df %&gt;% \n    sf::st_transform(crs = crsLAEA) |&gt;\n    cartogram::cartogram_cont(\n      weight = \"pop_1000s\",\n      itermax = 5\n    ) |&gt;\n    sf::st_transform(crs = crsLONGLAT)\n  return(deu_cart)\n}\n\n\nmake_cartogram &lt;- function(cart, coordinates, labels) {\n  p3a &lt;-\n    ggplot(cart) +\n    geom_sf(aes(fill = pop_1000s),\n            color = \"grey20\",\n            size = .1\n    ) +\n    scale_fill_gradientn(\n      name = \"\",\n      colours = cols,\n      breaks = breaks,\n      labels = round(breaks, 0),\n      limits = c(vmin, vmax)\n    ) +\n    guides(fill = guide_legend(\n      direction = \"horizontal\",\n      keyheight = unit(1.15, units = \"mm\"),\n      keywidth = unit(15, units = \"mm\"),\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = .5,\n      nrow = 1,\n      byrow = T,\n      reverse = F,\n      label.position = \"bottom\"\n    )) +\n    custom_theme() +\n    labs(\n      y = \"\",\n      subtitle = \"\",\n      x = \"\",\n      title = \"\",\n      caption = \"\"\n    )\n  \n  # Add label regions only if labels = TRUE\n  if (labels) {\n    p3a &lt;- p3a + label_regions(coordinates)\n  }\n  \n  return(p3a)\n}\n\n\nget_ncontig_cartogram &lt;- function(data) {\n  deu_ncart &lt;- data %&gt;% \n    sf::st_transform(crs = crsLAEA) %&gt;% \n    cartogram::cartogram_ncont(\n      weight = \"pop_1000s\",\n      inplace = F\n    )\n  return(deu_ncart)\n}\n\n\n\n\n\nmake_ncontig_cartogram &lt;- function(ncart, nuts, theme) {\n  p3b &lt;-\n    ggplot(ncart) +\n    geom_sf(aes(fill = pop_1000s),\n            color = NA,\n            size = 0\n    ) +\n    geom_sf(\n      data = nuts, fill = \"transparent\",\n      color = \"grey20\", size = .1\n    ) +\n    scale_fill_gradientn(\n      name = \"\",\n      colours = cols,\n      breaks = breaks,\n      labels = round(breaks, 0),\n      limits = c(vmin, vmax)\n    ) +\n    guides(fill = guide_legend(\n      position = \"bottom\",\n      direction = \"horizontal\",\n      keyheight = unit(1.15, units = \"mm\"),\n      keywidth = unit(15, units = \"mm\"),\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = .5,\n      nrow = 1,\n      byrow = T,\n      reverse = F,\n      label.position = \"bottom\"\n    )) +\n    theme() +\n    labs(\n      y = \"\",\n      subtitle = \"\",\n      x = \"\",\n      title = \"\",\n      caption = \"\"\n    )\n  return(p3b)\n}\n\nget_dorling_cartogram &lt;- function(data) {\n  dorling_cart &lt;- data %&gt;% \n    filter(!is.na(values)) %&gt;% \n    st_transform(crs = crsLAEA) %&gt;% \n    cartogram::cartogram_dorling(\n      weight = \"pop_1000s\"\n    )\n  return(dorling_cart)\n}\n\n\n\nmake_dorling_cartogram &lt;- function(dorling_cart, theme) {\n  p3c &lt;-\n    ggplot(dorling_cart) +\n    geom_sf(aes(fill = pop_1000s),\n            color = NA,\n            size = 0\n    ) +\n    scale_fill_gradientn(\n      name = \"\",\n      colours = cols,\n      breaks = breaks,\n      labels = round(breaks, 0),\n      limits = c(vmin, vmax)\n    ) +\n    guides(fill = guide_legend(\n      position = , \"bottom\",\n      direction = \"horizontal\",\n      keyheight = unit(1.15, units = \"mm\"),\n      keywidth = unit(15, units = \"mm\"),\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = .5,\n      nrow = 1,\n      byrow = T,\n      reverse = F,\n      label.position = \"bottom\"\n    )) +\n    theme() +\n    labs(\n      y = \"\",\n      subtitle = \"\",\n      x = \"\",\n      title = \"\",\n      caption = \"\"\n    )\n  return(p3c)\n}\n\n\n\nget_dot_density &lt;- function(data) {\n  num_dots &lt;- ceiling(dplyr::select(as.data.frame(data), pop_1000s)) %&gt;% \n    filter(!is.na(pop_1000s))\n  dots &lt;- map_df(\n    names(num_dots),\n    ~ sf::st_sample(df, size = num_dots[, .x], type = \"random\") %&gt;% \n      sf::st_cast(\"POINT\") %&gt;% \n      sf::st_coordinates() %&gt;% \n      as_tibble() %&gt;% \n      setNames(c(\"long\", \"lat\"))\n  )\n  return(dots)\n}\n\nmake_dot_density_map &lt;- function(dots, nuts, labels, coordinates, theme) {\n  p4 &lt;-\n    ggplot(dots) +\n    geom_sf(\n      data = nuts, fill = \"transparent\",\n      color = \"grey20\", size = .1\n    ) +\n    geom_point(\n      data = dots, aes(x = long, y = lat),\n      color = cols[5], size = .1, shape = 19, alpha = .2\n    ) +\n    theme() +\n    labs(\n      y = \"\",\n      subtitle = \"\",\n      x = \"\",\n      title = \"\",\n      caption = \"\"\n    )\n  \n  # Add label regions only if labels = TRUE\n  if (labels) {\n    p4 &lt;- p4 + label_regions(coordinates)\n  }\n  \n  \n  return(p4)\n}\n\nget_grid &lt;- function(country) {\n  \n  sf &lt;- giscoR::gisco_get_countries(\n    year = \"2020\",\n    epsg = \"4326\",\n    resolution = \"3\",\n    country = country\n  )\n  \n  sf_transf &lt;- sf |&gt;\n    sf::st_transform(3575)\n  \n  grid &lt;- sf_transf |&gt;\n    sf::st_make_grid(cellsize = 50000) |&gt;\n    sf::st_intersection(sf_transf) |&gt;\n    st_cast(\"MULTIPOLYGON\") |&gt;\n    sf::st_sf() |&gt;\n    dplyr::mutate(id = row_number()) |&gt;\n    sf::st_transform(crs = crsLONGLAT)\n  \n  \n  return(grid)\n}\n\n\nget_aggregated_grid &lt;- function(grid, points) {\n  grid_final &lt;- grid %&gt;% \n    sf::st_join(points) %&gt;% \n    dplyr::group_by(id) %&gt;% \n    dplyr::summarise_at(\n      vars(pop_1000s),\n      list(pop_sum = sum)\n    ) %&gt;% \n    drop_na(pop_sum) %&gt;% \n    sf::st_sf() %&gt;% \n    sf::st_transform(crs = crsLONGLAT)\n  return(grid_final)\n}\n\n\n\nmake_grid_map &lt;- function(data, coordinates, labels, theme) {\n  p5 &lt;-\n    ggplot(data) +\n    geom_sf(aes(fill = pop_sum),\n            color = \"grey20\",\n            size = .1\n    ) +\n    scale_fill_gradientn(\n      name = \"\",\n      colours = cols,\n      breaks = breaks,\n      labels = round(breaks, 0),\n      limits = c(vmin, vmax)\n    ) +\n    guides(fill = guide_legend(\n      direction = \"horizontal\",\n      keyheight = unit(1.15, units = \"mm\"),\n      keywidth = unit(15, units = \"mm\"),\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = .5,\n      nrow = 1,\n      byrow = T,\n      reverse = F,\n      label.position = \"bottom\"\n    )) +\n    theme() +\n    labs(\n      y = \"\",\n      subtitle = \"\",\n      x = \"\",\n      title = \"\",\n      caption = \"\"\n    )\n  return(p5)\n  \n  # Add label regions only if labels = TRUE\n  if (labels) {\n    p5 &lt;- p5 + label_regions(coordinates)\n  }\n  \n}\n\n\nmake_raster_matrix &lt;- function(data) {\n  pop_rast &lt;- terra::rasterize(\n    data,\n    terra::rast(data, resolution = .01),\n    data$pop_sum\n  ) %&gt;%  terra::na.omit()\n  \n  pop_mat &lt;- rayshader::raster_to_matrix(pop_rast)\n  \n  return(pop_mat)\n}\n\n\n# Defining LongLat --------------------------------------------------------\n\n# longlat\ncrsLONGLAT &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n# Lambert\ncrsLAEA &lt;-  \"+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs\"\n\ncountry = \"UK\"\n\n# Get  internal boundaries ---------------------------------\n\n\nnuts3 &lt;- giscoR::gisco_get_nuts(\n  year = \"2021\",\n  epsg = \"4326\",\n  resolution = \"3\",\n  nuts_level = \"3\",\n  country = country\n)\n\n\n# Get the population data -------------------------------------------------\n\n\npop_df &lt;- eurostat::get_eurostat(\"demo_r_pjangrp3\",\n                                 time_format = \"num\"\n) %&gt;% \n  dplyr::filter(\n    sex == \"T\" &\n      unit == \"NR\" &\n      age == \"TOTAL\" &\n      grepl(\"UK\", geo) &\n      TIME_PERIOD == 2019 # No data available after that - likely due to\n  ) %&gt;% \n  dplyr::select(geo, values) %&gt;% \n  dplyr:: rename(NUTS_ID = geo) # rename for Merge\n\ndf &lt;- nuts3 %&gt;% \n  dplyr::left_join(pop_df, by = \"NUTS_ID\")\n\n\n# Draw the ploygons -------------------------------------------------------\n\npolygon &lt;- get_polygon()\n\nvmin &lt;- min(polygon$pop_per_sqr_km, na.rm = T)\nvmax &lt;- max(polygon$pop_per_sqr_km, na.rm = T)\n\n\nbrk &lt;- round(classIntervals(polygon$pop_per_sqr_km,\n                            n = 6,\n                            style = \"equal\")$brks, 0) %&gt;% \n  head(-1) %&gt;% \n  tail(-1) %&gt;% \n  append(vmax)\n\nbreaks &lt;- c(vmin, brk)\n\n\nmap1 &lt;- make_polygon_map(polygon = polygon, theme = custom_theme) %&gt;% \n  print()\n\n\n\n\n\n\nShow codeggsave(\n  filename = paste0(country, \"_population_polygon.png\"),\n  width = 6, height = 8.5, dpi = 600, device = \"png\",\n  bg = \"#f5f5f2\", map1)\n\n\n# Draw the Points on the Map ----------------------------------------------\n\n\n# normalize population size\ndf$pop_1000s &lt;- df$values / 1000\n\nvmin &lt;- min(df$pop_1000s, na.rm = T)\nvmax &lt;- max(df$pop_1000s, na.rm = T)\n\n# bins\nbrk &lt;- round(classIntervals(df$pop_1000s,\n                            n = 6,\n                            style = \"equal\"\n)$brks, 0) %&gt;% \n  head(-1) %&gt;% \n  tail(-1) %&gt;% \n  append(vmax)\n\n# breaks\nbreaks &lt;- c(vmin, brk)\n\npoints &lt;- df %&gt;% \n  sf::st_centroid()\n\ncoords &lt;- points %&gt;% \n  dplyr::mutate(\n    long = unlist(map(geometry, 1)),\n    lat = unlist(map(geometry, 2))\n  ) %&gt;% \n  dplyr::select(NAME_LATN, long, lat, pop_1000s) %&gt;% \n  sf::st_drop_geometry() %&gt;% \n  as.data.frame() %&gt;% \n  dplyr::arrange(desc(pop_1000s))\n\n#Just want the capitals maps\n\ncities_data &lt;- data.frame(\n  NAME_LATN = c(\"Cardiff\", \"London\", \"Edinburgh\", \"Belfast\"),\n  lat = c(51.4816, 51.5074, 55.9533, 54.5973),\n  long = c(-3.1791, -0.1278, -3.1883, -5.9301)\n)\n\n\n\n\nmap2 &lt;- make_point_map(coordinates= cities_data, labels = T) %&gt;% \n  print()\n\n\n\n\n\n\nShow codeggsave(\n  filename = paste0(country, \"_population_polygon_point.png\"),\n  width = 6, height = 8.5, dpi = 600, device = \"png\",\n  bg = \"white\", map2\n)\n\n\n# Cartogram ---------------------------------------------------------------\n\n\ncart &lt;- get_cartogram(df)\n\nmap3a &lt;- make_cartogram(cart, coordinates= cities_data, labels = T)\n\n\nggsave(\n  filename = paste0(country, \"_population_cartogram.png\"),\n  width = 6, height = 8.5, dpi = 600,\n  device = \"png\", bg = \"white\", map3a\n)\n\n\n# Non-contiguous Area Cartogram -------------------------------------------\n\nncart &lt;- get_ncontig_cartogram(data = df)\n\nmap3b &lt;- make_ncontig_cartogram(ncart = ncart, nuts = nuts3, theme = custom_theme())\n\n\n\n# Dorling -----------------------------------------------------------------\n\n\ndorling_cart &lt;- get_dorling_cartogram(data = df)\n\n\nmap3c &lt;- make_dorling_cartogram(dorling_cart = dorling_cart, theme = custom_theme)\n\n\nggsave(\n  filename = paste0(country, \"_population_dorling_cartogram.png\"),\n  width = 7, height = 7.5, dpi = 600, device = \"png\",\n  bg = \"white\", map3c)\n\n\n# Dot Density -------------------------------------------------------------\n\ndots &lt;- get_dot_density(data = df)\n\n\nmap4 &lt;- make_dot_density_map(dots = dots, nuts = nuts3, labels = T, coordinates = cities_data, theme = custom_theme)\n\n\nggsave(\n  filename = paste0(country, \"_population_dot_density.png\"),\n  width = 6, height = 8.5, dpi = 600, device = \"png\",\n  bg = \"white\", map4\n)\n\ngrid &lt;- get_grid(country = country)\n\n\ngrid_final &lt;- get_aggregated_grid(grid = grid, points = points)\n\n\nvmin &lt;- min(grid_final$pop_sum, na.rm = T)\nvmax &lt;- max(grid_final$pop_sum, na.rm = T)\n\nbrk &lt;- round(classIntervals(grid_final$pop_sum,\n                            n = 6,\n                            style = \"equal\"\n)$brks, 0) %&gt;% \n  head(-1) %&gt;% \n  tail(-1) %&gt;% \n  append(vmax)\n\nbreaks &lt;- c(vmin, brk)\n\n\nmap5 &lt;- make_grid_map(data = grid_final, coordinates = cities_data, labels = T, theme =custom_theme)\n\nggsave(\n  filename = paste0(country, \"_population_grid.png\"),\n  width = 6, height = 8.5, dpi = 600, device = \"png\",\n  bg = \"#f5f5f2\", map5\n)\n\npop_mat &lt;- make_raster_matrix(data = grid_final)\n\nh &lt;- 762\nw &lt;- 916\n\ntexture &lt;- grDevices::colorRampPalette(cols, bias = 3)(21)                      \n\n\npop_mat %&gt;% \n  rayshader::height_shade(texture = texture) %&gt;% \n  rayshader::plot_3d(\n    heightmap = pop_mat,\n    solid = F,\n    soliddepth = 0,\n    z = 20,\n    shadowdepth = 0,\n    shadow_darkness = .75,\n    windowsize = c(w, h),\n    phi = 65,\n    zoom = .6,\n    theta = -30,\n    background = \"white\"\n  )\n\n# rayshader::render_camera(phi = 35, zoom = .6, theta = -20)\n# \n# rayshader::render_highquality(\n#   filename = \"germany_population_3d.png\",\n#   samples = 500,\n#   preview = T,\n#   light = T,\n#   lightdirection = 0,\n#   lightcolor = \"white\",\n#   lightintensity = 1000,\n#   interactive = F,\n#   width = w, height = h\n# )\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/RugbyResults/6NationResultsWebApp.html",
    "href": "data_visualisations/RugbyResults/6NationResultsWebApp.html",
    "title": "Rugby Results Web App",
    "section": "",
    "text": "This was my first attempt at building a Shiny App based on my previous project. It is more flexible with some interactive text when you hover over the tiles.\nOpen Rugby Results App\n\n\n\nFigure 1\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week05.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week05.html",
    "title": "Simpsons Data Analysis",
    "section": "",
    "text": "Thumbnail\n\n1. R code\n\nShow code# Load the packages in ----------------------------------------------------\n\nif(!require(httr)){install.packages(\"httr\"); library(httr)}\nif(!require(jsonlite)){install.packages(\"jsonlite\"); library(jsonlite)}\nif(!require(withr)){install.packages(\"withr\"); library(withr)}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(readxl)){install.packages(\"readxl\"); library(readxl)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(gridExtra)){install.packages(\"gridExtra\"); library(gridExtra)}\nif(!require(grid)){install.packages(\"grid\"); library(grid)}\nif(!require(cowplot)){install.packages(\"cowplot\"); library(cowplot)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(ggpmisc)){install.packages(\"ggpmisc\"); library(ggpmisc)}\nif(!require(ggimage)){install.packages(\"ggimage\"); library(ggimage)}\nif(!require(jpeg)){install.packages(\"jpeg\"); library(jpeg)}\nif(!require(tinytex)){install.packages(\"tinytex\"); library(tinytex)}\n\n# get the wd\nwd &lt;- getwd()\n\n\n# I have gone beyond the remit of the TidyTuesday and used the whole dataset --------\n# No one cares about the later seasons\n\n# Source for using full dataset: https://github.com/toddwschneider/flim-springfield\n# Define the metadata URL and fetch it\nmetadata_url &lt;- \"www.kaggle.com/datasets/prashant111/the-simpsons-dataset/croissant/download\"\nresponse &lt;- httr::GET(metadata_url)\n\n# Ensure the request succeeded\nif (httr::http_status(response)$category != \"Success\") {\n  stop(\"Failed to fetch metadata.\")\n}\n\n# Parse the metadata\nmetadata &lt;- httr::content(response, as = \"parsed\", type = \"application/json\")\n\n# Locate the ZIP file URL\ndistribution &lt;- metadata$distribution\nzip_url &lt;- NULL\n\nfor (file in distribution) {\n  if (file$encodingFormat == \"application/zip\") {\n    zip_url &lt;- file$contentUrl\n    break\n  }\n}\n\nif (is.null(zip_url)) {\n  stop(\"No ZIP file URL found in the metadata.\")\n}\n\n# Download the ZIP file. We'll use the withr package to make sure the downloaded\n# files get cleaned up when we're done.\ntemp_file &lt;- withr::local_tempfile(fileext = \".zip\")\nutils::download.file(zip_url, temp_file, mode = \"wb\")\n\n# Unzip and read the CSV\nunzip_dir &lt;- withr::local_tempdir()\nutils::unzip(temp_file, exdir = unzip_dir)\n\n# Locate the CSV file within the extracted contents\ncsv_file &lt;- list.files(unzip_dir, pattern = \"\\\\.csv$\", full.names = TRUE)\n\nif (length(csv_file) == 0) {\n  stop(\"No CSV file found in the unzipped contents.\")\n}\n\n# Read the CSV into a dataframe\ncharacters &lt;- read_csv(csv_file[1])\nepisodes &lt;- read_csv(csv_file[2])\nlocations &lt;- read_csv(csv_file[3])\nscript_lines &lt;- read_csv(csv_file[4])\n\n\n\n\n# Load the font and define the theme --------------------------------------\n\n#| warning: false\n#| echo: FALSE\n#| message: false\n\nfont_add_google(\"Permanent Marker\")\nshowtext_auto()\n\n\n# Custom Theme - to emulate the simpson colour scheme of yellow and blue\ncustom_theme &lt;- function() {\n  ggplot2::theme(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.title = element_text(size = 60, face = \"bold\", family = \"Permanent Marker\", color = \"#FFD90F\", hjust =  0.5),    \n    plot.subtitle = element_text(size = 48, face = \"bold\", family = \"Permanent Marker\", color = \"#FFD90F\"),    \n    plot.caption = element_text(size = 13,  family = \"Permanent Marker\", color = \"#FFD90F\"),    \n    axis.text = element_text(family = \"Permanent Marker\", size = 13, color = \"#FFD90F\"),   \n    axis.title.x = element_text(size = 32,  family = \"Permanent Marker\", color = \"#FFD90F\"), \n    axis.title.y = element_text(size = 32,  family = \"Permanent Marker\", color = \"#FFD90F\"), \n    axis.line = element_line(linewidth  = 0.5, colour = \"darkgrey\"),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 20,  family = \"Permanent Marker\", color = \"#FFD90F\"),\n    axis.text.y = element_text(angle = 45, hjust = 1, size = 20, family = \"Permanent Marker\", color = \"#FFD90F\"),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(), \n    panel.background = element_rect(fill = alpha(\"#009DDC\", 0.3),  \n                                    color = \"#009DDC\", \n                                    linewidth = 0.5, \n                                    linetype = \"solid\"),\n    plot.background = element_rect(fill = alpha(\"#009DDC\", 1),  \n                                   color = \"#009DDC\", \n                                   linewidth = 0.5, \n                                   linetype = \"solid\"),\n    legend.background = element_rect(fill = alpha(\"#009DDC\", 0.5),  \n                                     color = \"#009DDC\", \n                                     linewidth = 0.5, \n                                     linetype = \"solid\"),\n    legend.title = element_text(family = \"Permanent Marker\", size = 32, color = \"#FFD90F\"),\n    legend.text = element_text(family = \"Permanent Marker\", size = 32, color = \"#FFD90F\"),\n    legend.position = \"bottom\")\n}\n\n\n# Character Gender Split in the Simpsons --------------------------------------------\n\ngender &lt;- characters %&gt;% \n  select(gender) %&gt;% \n  filter(!is.na(gender)) %&gt;% \n  mutate(gender = str_to_upper(factor(gender)),\n         gender = case_when(gender == \"F\" ~ \"Female\", \n                            gender == \"M\" ~ \"Male\",\n                            TRUE ~ NA))\n\nbarchart_gender &lt;- gender %&gt;% \n  ggplot(aes(x = gender)) +\n  geom_bar(aes(fill = gender))  +\n  geom_text(stat = \"count\", aes(label = after_stat(paste0(\"n = \", count))), \n            vjust = 2, size = 15,  \n            family = \"Permanent Marker\", \n            color = \"#FFD90F\") +\n  scale_fill_brewer(palette = \"Set2\") +  # Use a nice color scheme\n  custom_theme() + \n  labs(subtitle = \"Character Gender Split\", y = \"Number\", fill = \"Gender\")\n\n\n# Heatmap of IMDB Ratings -------------------------------------------------\n\nheat &lt;- episodes %&gt;% \n  select(season, number_in_season, imdb_rating, title) %&gt;%  \n  mutate(season = factor(season),\n         number_in_season = factor(number_in_season))\n# Build a table\n\nmax_rating &lt;- max(heat$imdb_rating, na.rm = TRUE)\nmin_rating &lt;- min(heat$imdb_rating, na.rm = TRUE)\n\n\nlow_rating &lt;- heat %&gt;%\n  filter(imdb_rating == min_rating)\nhigh_rating &lt;- heat %&gt;%\n  filter(imdb_rating == max_rating)\n\nhighlight_episodes &lt;- heat %&gt;%\n  filter(imdb_rating == max_rating | imdb_rating == min_rating) %&gt;%\n  arrange(desc(imdb_rating)) \n\nhighlight_table &lt;- data.frame(\n  `Episode Name` = highlight_episodes$title,\n  `Season` = highlight_episodes$season,\n  `IMDB Rating` = round(highlight_episodes$imdb_rating, 1),\n  check.names=FALSE\n)\n\n#Only way I could work out how to do this to add a title to the table above\n\ntitle_table &lt;- data.frame(matrix(ncol = 1, nrow = 1))\n\ncolnames(title_table) = \"Highest and Lowest Rated Episodes\"\n\ntitle_table[is.na(title_table)] &lt;- \"\"\n\nheatmap_episode &lt;- ggplot(heat, aes(x = season, y = number_in_season, fill = imdb_rating)) +\n  geom_tile() +\n  geom_text(aes(label = round(imdb_rating, 1)),  \n            color = alpha(\"Black\", 0.5),  \n            size = 8,  \n            family = \"Permanent Marker\") +\n  scale_fill_gradient(low = \"firebrick2\", high = \"yellow\", limits = c(4,10)) +  \n  labs(\n    subtitle = \"Heatmap of Episode IMDB Ratings\", \n    x = \"Season Number\",  \n    y = \"Episode Number\", \n    fill = \"IMDB Rating\",\n    caption = \"Grey indicated data not available\") +\n  custom_theme() + \n  theme(legend.position = \"right\") +\n  geom_tile(data = low_rating, \n            aes(x = season, y = number_in_season), \n            color = \"darkred\",\n            linewidth = 1, \n            fill = NA)  + \n  geom_tile(data = high_rating, \n            aes(x = season, y = number_in_season), \n            color = \"darkgreen\",\n            linewidth = 1, \n            fill = NA) +\n  # Add a Table to the graph\n  annotate(geom = \"table\", x = 20, y = 30, label = list(highlight_table), \n           vjust = 1, hjust = 0, family = \"Permanent Marker\", color = alpha(\"black\", 0.5),\n           table.theme = ttheme_minimal(title = \"Highest and Lowest Rated Episodes\",\n                                        base_colour = \"#FFD90F\", base_family = \"Permanent Marker\", color = \"#009DDC\",base_size = 20,\n                                        core=list(bg_params = list(fill = \"#009DDC\")), \n                                        colhead = list(bg_params = list(fill = \"#009DDC\")))) + \n  # Add a table title to the graph (Messy but)\n  annotate(geom = \"table\", x = 20.5, y = 33, label = list(title_table), \n           vjust = 1, hjust = 0, family = \"Permanent Marker\", color = alpha(\"black\", 0.5),\n           table.theme = ttheme_minimal(title = \"Highest and Lowest Rated Episodes\",\n                                        base_colour = \"#FFD90F\", base_family = \"Permanent Marker\", base_size = 20, color = \"#009DDC\",\n                                        core=list(bg_params = list(fill = \"#009DDC\")), \n                                        colhead = list(bg_params = list(fill = \"#009DDC\"))))\n\n\n\n\n# Boxplot of viewership over time -----------------------------------------\n\n\nviewers &lt;- episodes %&gt;% \n  select(season, us_viewers_in_millions) %&gt;% \n  group_by(season) %&gt;% \n  summarise(mean = mean(us_viewers_in_millions),\n            sd =  sd(us_viewers_in_millions),\n            n = n(),\n            se = sd/sqrt(n), \n            lci = mean - qt(1 - (0.05 / 2), n - 1) * se, \n            uci = mean + qt(1 - (0.05 / 2), n - 1) * se)\n\nboxplot_viewers &lt;- ggplot(episodes, aes(x = factor(season), y = us_viewers_in_millions)) +\n  geom_boxplot(fill = alpha(\"firebrick2\", 0.9), color = \"black\", outlier.shape = NA) +  \n  geom_smooth(method = \"lm\", se=FALSE, color= \"#F2E86D\", aes(group=1)) +\n  labs(\n    subtitle = \"US Viewership per Season\",\n    x = \"Season Number\",\n    y = \"US Viewers (Millions)\",\n    caption = \"Yellow Line: Trendline derived from Linear Model\"\n  ) +\n  custom_theme() +\n  theme(plot.caption = element_text(hjust = 0))\n\nwd &lt;- getwd()\n\n\nfig_dir &lt;- paste0(wd, \"/1. Data/1. Images/\")\n\nlines &lt;-script_lines %&gt;% \n  filter(speaking_line == T) %&gt;% \n  rename(Character = raw_character_text) %&gt;% \n  select(Character, word_count) %&gt;% \n  group_by(Character) %&gt;%\n  summarise(n = n())  %&gt;% \n  arrange(desc(n)) %&gt;%  \n  slice(1:10)  %&gt;% \n  mutate(image = case_when(\n    Character ==  \"Homer Simpson\" ~ paste0(fig_dir, \"Homer.png\"),\n    Character ==  \"Marge Simpson\" ~ paste0(fig_dir, \"Marge_Simpson.png\"),\n    Character ==  \"Bart Simpson\" ~ paste0(fig_dir, \"Bart_Simpson_200px.png\"),\n    Character ==  \"Lisa Simpson\" ~ paste0(fig_dir, \"Lisa_Simpson.png\"),\n    Character ==  \"C. Montgomery Burns\" ~ paste0(fig_dir, \"Mr_Burns.png\"),\n    Character ==  \"Moe Szyslak\" ~ paste0(fig_dir, \"Moe_Szyslak.png\"),\n    Character ==  \"Seymour Skinner\" ~ paste0(fig_dir, \"Seymour_Skinner.png\"),\n    Character ==  \"Ned Flanders\" ~ paste0(fig_dir, \"Ned_Flanders.png\"),\n    Character ==  \"Grampa Simpson\" ~ paste0(fig_dir, \"Abe_Simpson.png\"),\n    Character ==  \"Chief Wiggum\" ~ paste0(fig_dir, \"Chief_Wiggum.png\")))\n\n\nbarchart_lines &lt;- lines %&gt;% \n  ggplot(aes(x = reorder(Character, n), y = n, fill = Character)) +  \n  geom_bar(stat = \"identity\") +  \n  geom_image(aes(x = Character, y = -max(n) * 0.05, image = image), \n             size = 0.04, asp = 1) +  \n  geom_text(aes(label = paste0(\"n = \", n), y=n/1.5),  # looks the best\n            hjust= -0.5,\n            position = position_dodge(width = .25),\n            size = 10,  \n            family = \"Permanent Marker\", \n            color = \"#FFD90F\") +\n  coord_flip() + \n  labs(x = \"\", y = \"Number of Lines\", subtitle = \"Most Spoken Lines per Character\") +  \n  custom_theme() +\n  theme(\n    axis.text.y = element_blank(),  \n    axis.ticks.y = element_blank(), \n    legend.position = \"none\"\n  )\n\n\n\n# Combine all the charts and save them in an outputs folder ---------------\n\n\n\n\n\ncombined &lt;- (barchart_gender + boxplot_viewers + barchart_lines) / heatmap_episode +\n  plot_annotation(title = 'The Simpsons',\n                  caption = \"TidyTuesday: Week 5, 2025\",\n                  theme = custom_theme()) +\n  theme(caption = element_text(hjust =  0.5))\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week12.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week12.html",
    "title": "TidyTuesday Week 12: Amazon‚Äôs Annual Reports",
    "section": "",
    "text": "Thumbnail\n\n1. R code\n\nShow code# Load the packages in ----------------------------------------------------\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(ggplot2)){install.packages(\"ggplot2\"); library(ggplot2)}\nif(!require(ggwordcloud)){install.packages(\"ggwordcloud\"); library(ggwordcloud)}\n# I stick all my styling into a CUsotm PAckage to tidy up my code and keep it consistent over the time\nif(!require(CustomGGPlot2Theme)){devtools::install(\"CustomGGPlot2Theme\"); library(CustomGGPlot2Theme)}\n\n# get the wd\nwd &lt;- getwd()\n\nfont &lt;- \"noto_mono\"\namazon &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-25/report_words_clean.csv')\n\n\ndata_clean &lt;- amazon %&gt;%\n  filter(year &gt;= 2013) %&gt;%\n  group_by(year, word) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%     \n  arrange(year, desc(count)) %&gt;% # Sort within each year by count\n  group_by(year) %&gt;%\n  slice(1:15) %&gt;% # Select top 15 words per year\n  ungroup() %&gt;%\n  filter(word != \"aaa\") %&gt;% \n  mutate(word = str_remove_all(word, \"&lt;.*?&gt;\"))\n\n\n\n\nwordcloud  &lt;- ggplot(data_clean, aes(label = word, size = count, color = count)) +\n  geom_text_wordcloud(area_corr = TRUE) +\n  facet_wrap(~ year) +\n  scale_size_area(max_size = 15) +\n  scale_color_gradient(low = \"blue\", high = \"red\") +\n  Custom_Style() +\n  theme(\n    strip.background = element_rect(fill = \"#FFFBF0\", color = \"#FFFBF0\"), \n    strip.text = element_text(size = 32, face = \"bold\", color = \"black\", family = font, hjust = 0) )\n\np1 &lt;- wordcloud +\n  plot_annotation(\n    title = str_wrap(\"Word Cloud of Top 15 Most Commonly used words in Amazon's Annual Report (2013-2023)\", 40),\n    subtitle = \"TidyTuesday: Week 12, 2025\",\n    theme = Custom_Style()\n  ) &\n  theme(\n    caption = element_text(hjust = 0.5),\n    plot.subtitle = element_text(size = 20),\n    plot.title = element_text(size = 32)\n  )\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week12.png\", \n  plot = p1, \n  height = 1080 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week11.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week11.html",
    "title": "TidyTuesday Week 11: PAlm Trees Analysis",
    "section": "",
    "text": "Thumbnail\n\n1. R code\n\nShow code# Load the packages in ----------------------------------------------------\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(ggdendro)){install.packages(\"ggdendro\"); library(ggdendro)}\nif(!require(ggbrick)){install.packages(\"ggbrick\"); library(ggbrick)}\nif(!require(ggmosaic)){install.packages(\"ggmosaic\"); library(ggmosaic)}\nif(!require(treemapify)){install.packages(\"treemapify\"); library(treemapify)}\n\n# get the wd\nwd &lt;- getwd()\n\n\npalmtrees &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')\n\nfont_add_google(\"Noto Sans Mono\", \"noto_mono\")\n\nfont &lt;- \"noto_mono\"\n\nshowtext_auto()\n\n\n\n# Color palette\n\ncolor &lt;- palette.colors(palette = \"Okabe-Ito\")\n\ncolor &lt;- append(color, \"gold\")\n\ncolor[1] &lt;- \"#D41159\"\n\n\n\n\n\nCustom_Style &lt;- function() {\n  \n  ggplot2::theme(\n    \n    plot.title = ggplot2::element_text(family=font,\n                                       \n                                       size=24,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    plot.subtitle = ggplot2::element_text(family=font,\n                                          \n                                          size=18,\n                                          \n                                          color=\"#222222\"),\n    \n    plot.caption = ggplot2::element_text(family=font,\n                                         \n                                         size=10,\n                                         \n                                         color=\"#222222\"),\n    \n    \n    \n    legend.position = \"bottom\",\n    \n    legend.title = ggplot2::element_text(family=font,\n                                         \n                                         size=22,\n                                         \n                                         face=\"bold\",\n                                         \n                                         color=\"#222222\"),\n    \n    # legend.text.align = 0,\n    \n    legend.key = ggplot2::element_blank(),\n    \n    legend.text = ggplot2::element_text(family=font,\n                                        \n                                        size=9,\n                                        \n                                        color=\"#222222\"),\n    \n    \n    \n    # Axis format\n    \n    axis.text = ggplot2::element_text(family = font,\n                                      \n                                      size=10,\n                                      \n                                      color=\"#222222\"),\n    \n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    \n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    \n    axis.title = ggplot2::element_text(family=font,\n                                       \n                                       size=12,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    \n    \n    \n    \n    # Grid lines\n    \n    panel.grid.minor = ggplot2::element_blank(),\n    \n    panel.grid.major.y = ggplot2::element_blank(),\n    \n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    \n    \n    \n    \n    # Very pale cream/yellow background\n    \n    panel.background = element_rect(fill = \"#FFFBF0\", \n                                    \n                                    color = \"#FFFBF0\",\n                                    \n                                    linewidth = 0.5,\n                                    \n                                    linetype = \"solid\"),\n    \n    plot.background = element_rect(fill = \"#FFFBF0\", \n                                   \n                                   color = \"#FFFBF0\",\n                                   \n                                   linewidth = 0.5,\n                                   \n                                   linetype = \"solid\"),\n    \n    legend.background = element_rect(fill = \"#FFFBF0\", \n                                     \n                                     color = \"#FFFBF0\",\n                                     \n                                     linewidth = 0.5,\n                                     \n                                     linetype = \"solid\"),\n    \n    \n    \n    \n    \n  )\n  \n}\npalm_colours &lt;- palmtrees %&gt;%\n  filter(!is.na(main_fruit_colors)) %&gt;% \n  mutate(main_fruit_colors = str_extract(main_fruit_colors, \"^[^;]+\"),\n         main_fruit_colors = str_to_title(main_fruit_colors)) %&gt;% \n  count(palm_tribe, main_fruit_colors) \n\n\n\ncolor_mapping &lt;- c(\n  \"Black\" = alpha(\"black\", 0.7), \"Blue\" = \"blue\", \"Brown\" = \"brown\", \"Green\" = \"green\", \n  \"Orange\" = \"orange\", \"Pink\" = \"pink\", \"Purple\" = \"purple\", \"Red\" = \"red\", \n  \"White\" = \"white\", \"Yellow\" = \"yellow\", \"Cream\" = \"antiquewhite\", \n  \"Grey\" = \"grey\", \"Ivory\" = \"ivory\", \"Straw-Coloured\" = \"wheat\"\n)\n\ncircular_bar &lt;- palm_colours %&gt;% \n  group_by(palm_tribe) %&gt;%\n  mutate(\n    percent = (n / sum(n)) * 100,\n     # Capitalize colors here\n  ) %&gt;%\n  ggplot(aes(x = palm_tribe, y = percent, fill = main_fruit_colors)) +\n  geom_bar(stat = \"identity\", width = 0.8) +\n  coord_polar() +\n  \n  scale_fill_manual(values = color_mapping) +\n  labs(fill = \"Primary Fruit Colour\") +\n  Custom_Style() +\n  theme(\n    axis.text.x = element_text(size = 22),\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.line = element_blank(),\n    legend.text = element_text(size = 22)\n  ) +\n  guides(fill = guide_legend(ncol = 3))\n\np1 &lt;- circular_bar +\n  theme(legend.position = \"bottom\") &\n  plot_annotation(\n    title = str_wrap(\"Percentage of Palm Tree Fruit Colors by Tribe\", 60),\n    subtitle = \"TidyTuesday: Week 11, 2025\",\n    theme = Custom_Style()\n  ) &\n  theme(\n    caption = element_text(hjust = 0.5),\n    plot.subtitle = element_text(size = 32),\n    plot.title = element_text(size = 48)\n  )\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week10.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week10.html",
    "title": "TidyTuesday Week 10: Pixar Films Analysis",
    "section": "",
    "text": "Thumbnail\n\n1. R code\n\nShow code# Load the packages in ----------------------------------------------------\n\nif(!require(httr)){install.packages(\"httr\"); library(httr)}\nif(!require(jsonlite)){install.packages(\"jsonlite\"); library(jsonlite)}\nif(!require(withr)){install.packages(\"withr\"); library(withr)}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\n\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(gridExtra)){install.packages(\"gridExtra\"); library(gridExtra)}\nif(!require(grid)){install.packages(\"grid\"); library(grid)}\nif(!require(cowplot)){install.packages(\"cowplot\"); library(cowplot)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(ggpmisc)){install.packages(\"ggpmisc\"); library(ggpmisc)}\nif(!require(rlist)){install.packages(\"rlist\"); library(rlist)}\n\n# get the wd\nwd &lt;- getwd()\n\n\npixar_films &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')\npublic_response &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')\n\n\n\n\nfont_add_google(\"Noto Sans Mono\", \"noto_mono\")\n\nfont &lt;- \"noto_mono\"\n\nshowtext_auto()\n\n\n\n# Color palette\n\ncolor &lt;- palette.colors(palette = \"Okabe-Ito\")\n\ncolor &lt;- append(color, \"gold\")\n\ncolor[1] &lt;- \"#D41159\"\n\n\n\n\n\nCustom_Style &lt;- function() {\n  \n  ggplot2::theme(\n    \n    plot.title = ggplot2::element_text(family=font,\n                                       \n                                       size=24,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    plot.subtitle = ggplot2::element_text(family=font,\n                                          \n                                          size=18,\n                                          \n                                          color=\"#222222\"),\n    \n    plot.caption = ggplot2::element_text(family=font,\n                                         \n                                         size=10,\n                                         \n                                         color=\"#222222\"),\n    \n    \n    \n    legend.position = \"bottom\",\n    \n    legend.title = ggplot2::element_text(family=font,\n                                         \n                                         size=12,\n                                         \n                                         face=\"bold\",\n                                         \n                                         color=\"#222222\"),\n    \n    # legend.text.align = 0,\n    \n    legend.key = ggplot2::element_blank(),\n    \n    legend.text = ggplot2::element_text(family=font,\n                                        \n                                        size=9,\n                                        \n                                        color=\"#222222\"),\n    \n    \n    \n    # Axis format\n    \n    axis.text = ggplot2::element_text(family = font,\n                                      \n                                      size=10,\n                                      \n                                      color=\"#222222\"),\n    \n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    \n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    \n    axis.title = ggplot2::element_text(family=font,\n                                       \n                                       size=12,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    \n    \n    \n    \n    # Grid lines\n    \n    panel.grid.minor = ggplot2::element_blank(),\n    \n    panel.grid.major.y = ggplot2::element_blank(),\n    \n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    \n    \n    \n    \n    # Very pale cream/yellow background\n    \n    panel.background = element_rect(fill = \"#FFFBF0\", \n                                    \n                                    color = \"#FFFBF0\",\n                                    \n                                    linewidth = 0.5,\n                                    \n                                    linetype = \"solid\"),\n    \n    plot.background = element_rect(fill = \"#FFFBF0\", \n                                   \n                                   color = \"#FFFBF0\",\n                                   \n                                   linewidth = 0.5,\n                                   \n                                   linetype = \"solid\"),\n    \n    legend.background = element_rect(fill = \"#FFFBF0\", \n                                     \n                                     color = \"#FFFBF0\",\n                                     \n                                     linewidth = 0.5,\n                                     \n                                     linetype = \"solid\"),\n    \n    \n    \n    \n    \n  )\n  \n}\n\n\n# MAke a Big Dataframe\n\nCombined &lt;- left_join(pixar_films, public_response, by = \"film\") %&gt;% \n  filter(!is.na(metacritic)) %&gt;% \n  mutate(decade = floor(year(as.Date(release_date)) / 10) * 10, .after = release_date) %&gt;% \n  group_by(decade) %&gt;% \n  arrange(release_date) %&gt;% \n  mutate(order_in_decade = row_number(),\n         decade = as.factor(decade)) %&gt;% \n  rename(`Rotten Tomatoes` = rotten_tomatoes,\n         `MetaCritic` = metacritic,\n         `Critics Choice` = critics_choice)\n\n\nrating_columns &lt;- c(\"MetaCritic\", \"Rotten Tomatoes\", \"Critics Choice\")\n\n\nlist_of_plots &lt;- list()\n\nfor (rating in rating_columns) {\n  \n  heatmap_plot &lt;- ggplot(Combined, aes(x = factor(decade), y = order_in_decade, fill = .data[[rating]])) +\n    geom_tile() +\n    scale_x_discrete(limits = sort(unique(Combined$decade))) +\n    geom_text(aes(label = paste0(str_wrap(film, 14), \"\\n\", round(.data[[rating]], 1))),\n              color = alpha(\"Black\", 1), size = 6, family = font) +\n    scale_fill_gradient(low = \"yellow\", high = \"darkgreen\") +\n    labs(\n      subtitle = paste(\"Heatmap of \", str_to_title(rating), \"Ratings\"),\n      x = \"Decade\",\n      y = \"Order in Decade \\n First film in each decade is at the bottom\",\n      fill = paste(str_to_title(rating), \"Rating\")\n    ) +\n    Custom_Style() +\n    theme(legend.position = \"right\")\n\n  list_of_plots &lt;- list.append(list_of_plots, heatmap_plot)\n}\nfinal_patchwork &lt;- wrap_plots(list_of_plots) &\n  theme(legend.position = \"bottom\") &\n  plot_annotation(\n    title = str_wrap('Comparison of Public and Critic Rating Systems for different Pixar films', 80),\n    subtitle = \"TidyTuesday: Week 10, 2025\",\n    theme = Custom_Style()\n  ) &\n  theme(\n    plot.subtitle = element_text(size = 16)\n  )\n\nprint(final_patchwork)\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "datavis.html",
    "href": "datavis.html",
    "title": "Data Visualizations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nRugby Results Web App\n\n\nAn interactive application to analyse the historical results played by the teams of the six nations and the rugby championship\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 12: Amazon‚Äôs Annual Reports\n\n\nThis week we‚Äôre exploring text data from Amazon‚Äôs annual reports. The PDFs were read into R using the {pdftools} R package, and explored by TidyTuesday participant Gregory Vander Vinne in a post on his website. Note that stop words (e.g., ‚Äòand‚Äô, ‚Äòthe‚Äô, ‚Äòa‚Äô) have been removed from the data.\n\n\n\n\n\n28 Mar, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 11: Palm Trees Analysis\n\n\nPlant traits are critical to plant form and function ‚Äîincluding growth, survival and reproduction‚Äî and therefore shape fundamental aspects of population and ecosystem dynamics as well as ecosystem services. Here, we present a global species-level compilation of key functional traits for palms (Arecaceae), a plant family with keystone importance in tropical and subtropical ecosystems.\n\n\n\n\n\n19 Mar, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 10: Pixar Films Analysis\n\n\nThis week we‚Äôre exploring Pixar films! The data this week comes from the {pixarfilms} R package by Eric Leung.\n\n\n\n\n\n17 Mar, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 9: Long Beach Animal Shelter\n\n\nThis week we‚Äôre exploring the Long Beach Animal Shelter Data! The dataset comes from the City of Long Beach Animal Care Services via the {animalshelter} R package. This dataset comprises of the intake and outcome record from Long Beach Animal Shelter.\n\n\n\n\n\n4 Mar, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 8: Racial Disparities in US Reproductive Medicine\n\n\nAcademic Literature on Racial and Ethnic Disparities in Reproductive Medicine in the US\n\n\n\n\n\n25 Feb, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 7: FBI Crime Reporting\n\n\nAn analysis of US Law Enforcement Reporting to the National Crime Agency\n\n\n\n\n\n19 Feb, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 6: CDC Archive Data Analysis\n\n\nAn Analysis of the CDC datasets archived/purged by the Trump administration\n\n\n\n\n\n11 Feb, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nTidyTuesday Week 5: Simpsons Data Analysis\n\n\nAn Analysis of data reagrding the Simpsons TV Series\n\n\n\n\n\n2 Feb, 2025\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "maps.html",
    "href": "maps.html",
    "title": "Maps",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nUK Population\n\n\nMy first foray into GIS work in R visualising the UK population.\n\n\n\n\n\n15 Dec, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLord of the Rings: Scale of Middle Earth\n\n\nA visuaisation of how big Middle Earth is compared with the size of Europe. Sam and Frodo walked a long way! Hobbiton is centered on Cardiff in Wales - just because\n\n\n\n\n\n9 Sep, 2024\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "biostatistics/MastersThesis.html",
    "href": "biostatistics/MastersThesis.html",
    "title": "MSc Epidemiology: Thesis",
    "section": "",
    "text": "A copy of my Master‚Äôs Thesis looking at the dynamics of Non-Specific Lower Back Pain Patients in German Emergency Departments.\n\n\n\nDocument"
  },
  {
    "objectID": "biostatistics/MastersThesis.html#masters-thesis",
    "href": "biostatistics/MastersThesis.html#masters-thesis",
    "title": "MSc Epidemiology: Thesis",
    "section": "",
    "text": "A copy of my Master‚Äôs Thesis looking at the dynamics of Non-Specific Lower Back Pain Patients in German Emergency Departments.\n\n\n\nDocument"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week09.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week09.html",
    "title": "TidyTuesday Week 9: Long Beach Animal Shelter",
    "section": "",
    "text": "Figure 1\n\n\nDisplay code# gc()\n# \n# rm(list = ls())\n# \n# graphics.off()\n# \n# cat('\\014')\n# \n\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\n\nif(!require(ggbrick)){install.packages(\"ggbrick\"); library(ggbrick)}\n\nif(!require(ggfortify)){install.packages(\"ggfortify\"); library(ggfortify)}\n\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\n\nif(!require(sysfonts)){install.packages(\"sysfonts\"); library(sysfonts)}\n\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\n\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\"); library(RColorBrewer)}\n\nif(!require(maps)){install.packages(\"maps\"); library(maps)}\n\nif(!require(rcrossref)){install.packages(\"rcrossref\"); library(rcrossref)}\n\nif(!require(ggshadow)){install.packages(\"ggshadow\"); library(ggshadow)}\n\nif(!require(ggridges)){install.packages(\"ggridges\"); library(ggridges)}\n\nif(!require(ggpp)){install.packages(\"ggpp\"); library(ggpp)}\n\nif(!require(gridExtra)){install.packages(\"gridExtra\"); library(gridExtra)}\n\nif(!require(sf)){install.packages(\"sf\"); library(sf)}\n\nif(!require(ggmap)){install.packages(\"ggmap\"); library(ggmap)}\nif(!require(osmdata)){install.packages(\"osmdata\"); library(osmdata)}\n\nwd &lt;- getwd()\n\n\n\n\n\nfont_add_google(\"Noto Sans Mono\", \"noto_mono\")\n\nfont &lt;- \"noto_mono\"\n\nshowtext_auto()\n\n\n\n# Color palette\n\ncolor &lt;- palette.colors(palette = \"Okabe-Ito\")\n\ncolor &lt;- append(color, \"gold\")\n\ncolor[1] &lt;- \"#D41159\"\n\n\n\n\n\nCustom_Style &lt;- function() {\n  \n  ggplot2::theme(\n    \n    plot.title = ggplot2::element_text(family=font,\n                                       \n                                       size=24,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    plot.subtitle = ggplot2::element_text(family=font,\n                                          \n                                          size=18,\n                                          \n                                          color=\"#222222\"),\n    \n    plot.caption = ggplot2::element_text(family=font,\n                                         \n                                         size=10,\n                                         \n                                         color=\"#222222\"),\n    \n    \n    \n    legend.position = \"bottom\",\n    \n    legend.title = ggplot2::element_text(family=font,\n                                         \n                                         size=12,\n                                         \n                                         face=\"bold\",\n                                         \n                                         color=\"#222222\"),\n    \n    # legend.text.align = 0,\n    \n    legend.key = ggplot2::element_blank(),\n    \n    legend.text = ggplot2::element_text(family=font,\n                                        \n                                        size=9,\n                                        \n                                        color=\"#222222\"),\n    \n    \n    \n    # Axis format\n    \n    axis.text = ggplot2::element_text(family = font,\n                                      \n                                      size=10,\n                                      \n                                      color=\"#222222\"),\n    \n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    \n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    \n    axis.title = ggplot2::element_text(family=font,\n                                       \n                                       size=12,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    \n    \n    \n    \n    # Grid lines\n    \n    panel.grid.minor = ggplot2::element_blank(),\n    \n    panel.grid.major.y = ggplot2::element_blank(),\n    \n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    \n    \n    \n    \n    # Very pale cream/yellow background\n    \n    panel.background = element_rect(fill = \"#FFFBF0\", \n                                    \n                                    color = \"#FFFBF0\",\n                                    \n                                    linewidth = 0.5,\n                                    \n                                    linetype = \"solid\"),\n    \n    plot.background = element_rect(fill = \"#FFFBF0\", \n                                   \n                                   color = \"#FFFBF0\",\n                                   \n                                   linewidth = 0.5,\n                                   \n                                   linetype = \"solid\"),\n    \n    legend.background = element_rect(fill = \"#FFFBF0\", \n                                     \n                                     color = \"#FFFBF0\",\n                                     \n                                     linewidth = 0.5,\n                                     \n                                     linetype = \"solid\"),\n    \n    \n    \n    \n    \n  )\n  \n}\n\n\n\n\n\nlongbeach &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv')  \n\n\n\n\n\n# Dogs\n\n\n\n# simple function to merge colours\n\n\n\nsimplify_color &lt;- function(color) {\n  \n  color &lt;- tolower(color)  # Convert to lowercase for consistency\n  \n  \n  \n  case_when(\n    \n    str_detect(color, \"white|cream|silver\") ~ \"White/Silver\",\n    \n    str_detect(color, \"brown|chocolate|tan|fawn|liver\") ~ \"Brown/Tan\",\n    \n    str_detect(color, \"black|seal|black smoke\") ~ \"Black\",\n    \n    str_detect(color, \"gray|blue|blue brindle|blue merle|blue tick\") ~ \"Gray/Blue\",\n    \n    str_detect(color, \"red|ruddy|red merle|orange|apricot\") ~ \"Red/Orange\",\n    \n    str_detect(color, \"yellow|yellow brindle|gold|wheat|blondebuff\") ~ \"Golden\",\n    \n    str_detect(color, \"sable|dapple|brindle|tiger|tricolor\") ~ \"Patterned\",\n    \n    TRUE ~ \"Other\"  # Default category for unexpected values\n    \n  )\n  \n}\n\n\n\n\n\ndogs &lt;- longbeach %&gt;%\n  \n  filter(animal_type == \"dog\") %&gt;%\n  \n  filter(primary_color != \"unknown\" | primary_color != \"pink\") %&gt;%\n  \n  mutate(year = floor(year(as.Date(intake_date))), .after = intake_date) %&gt;%\n  \n  select(animal_type, primary_color, year) %&gt;%\n  \n  mutate(color = simplify_color(primary_color)) %&gt;%\n  \n  select(-c(primary_color))\n\n\n\n\n\ndog_colors &lt;- c(\n  \n  \"White/Silver\" = \"#dcdcdc\",\n  \n  \"Brown/Tan\" = \"#987456\",\n  \n  \"Gray/Blue\" = \"#7e99b4\",\n  \n  \"Golden\" = \"#f7c66b\",\n  \n  \"Black\" = alpha(\"black\",0.75),\n  \n  \"Patterned\" = \"#ffb7c5\",\n  \n  \"Red/Orange\" = \"peru\",\n  \n  \"Other\" = \"#cc3333\"\n  \n  \n  \n)\n\n\n\nsubtitle &lt;- \"The colour of dogs admitted to the Long Beach Animal Shelter over the years\"\n\n\n\np1 &lt;- dogs %&gt;%\n  \n  count(animal_type, color, year) %&gt;%\n  \n  mutate(n = n / 10) %&gt;%\n  \n  ggplot() +\n  \n  geom_waffle0(aes(x = year, y = n, fill = color), gap = 0.015) +\n  \n  scale_x_continuous(breaks = unique(dogs$year)) +  # Ensure all years are displayed\n  \n  scale_fill_manual(values = dog_colors) +\n  \n  Custom_Style() +\n  labs(x = \"Year\", y = \"Count (x10)\", fill = \"Dog Colour\", subtitle = str_wrap(subtitle, 60)) +\n  \n  theme(legend.position = \"right\")\n\n\n#How long pets stay\n\nexcl_animal &lt;- c(\"rabbit\", \"bird\", \"amphibian\", \"wild\", \"other\", \"livestock\")\nadpotion_reasons &lt;- c(\"adoption\", \"return to owner\", \"foster to adopt\")\n\n\ntime &lt;- longbeach %&gt;%\n  \n  filter(!animal_type %in% excl_animal ) %&gt;%\n  filter(outcome_type %in% adpotion_reasons ) %&gt;%\n  \n  \n  select(animal_type, intake_date, outcome_date) %&gt;%\n  \n  mutate(time_in_shelter = outcome_date - intake_date,\n         \n         animal_type = str_to_title(animal_type))\n\n\n\n\n\n\n\nmax_stay &lt;- time %&gt;%\n  \n  group_by(animal_type) %&gt;%\n  \n  summarise(max_time = max(time_in_shelter, na.rm = TRUE))\n\n\n\nsubtitle &lt;- \"Average length of stay for animals in the Long Beach Animal Shelter to being adopted\"\n\n\n\n\n\n# Convert duration to numeric (in days)\n\ntime &lt;- time %&gt;%\n  \n  mutate(time_in_shelter_numeric = as.numeric(time_in_shelter, units = \"days\"))\n\n\n\n# Compute max stay per animal type (in numeric form)\n\nmax_stay &lt;- time %&gt;%\n  \n  group_by(animal_type) %&gt;%\n  \n  summarise(Max_Stay = max(time_in_shelter_numeric, na.rm = TRUE)) %&gt;%\n  \n  rename(\"Type of Animal\" = animal_type,\n         \n         \"Maximum Length of Stay Before Adoption (Days)\" = Max_Stay)\n\n\n\n# Create the violin plot and annotate with table\n\np2 &lt;- ggplot(time, aes(x = time_in_shelter_numeric, y = animal_type, fill = animal_type)) +\n  \n  geom_violin(alpha = 0.8) +\n  \n  scale_x_continuous(limits = c(-10, 365),\n                     \n                     breaks = seq(0, 365, by = 90),\n                     \n                     expand = c(0,0)) +\n  \n  annotate(geom = \"table\", x = 365/2, y = length(max_stay$`Maximum Length of Stay (Days)` ) + 1, label = list(max_stay),\n           \n           vjust = 1, hjust = 0, family = \"Permanent Marker\", color = alpha(\"black\", 0.5),\n           \n           table.theme = ttheme_minimal(\n                                        \n                                        base_colour = \"black\", base_family = \"noto_mono\", color = \"#FFFBF0\",base_size = 14,\n                                        \n                                        core=list(bg_params = list(fill = \"#FFFBF0\")),\n                                        \n                                        colhead = list(bg_params = list(fill = \"#FFFBF0\")))) +\n  \n  labs(x = \"Time Animal is in Shelter (Days)\", y = \"Animal Type\", fill = \"Animal Type\", subtitle = str_wrap(subtitle, 60)) +\n  \n  Custom_Style()\n\n\n\n\n\n\n# Geographcial location\n\nanimal_pickup &lt;- longbeach %&gt;%\n  \n  filter(animal_type == \"dog\" | animal_type == \"cat\") %&gt;% \n  mutate(animal_type = str_to_title(animal_type)) %&gt;% \n  select(animal_type, longitude, latitude) \n\nanimal_sf &lt;- st_as_sf(animal_pickup, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n\n# Define the long beach boundary (googled)\nlong_beach_bbox &lt;- c(-118.25, 33.75, -118.10, 33.80)\n\n#\nlong_beach_boundary &lt;- opq(bbox = long_beach_bbox) %&gt;%\n  add_osm_feature(key = \"boundary\", value = \"administrative\") %&gt;%\n  add_osm_feature(key = \"name\", value = \"Long Beach\") %&gt;%\n  osmdata_sf() %&gt;%\n  .$osm_multipolygons\n\n\n# Fetch major roads (primary, secondary, and tertiary)\nmajor_roads &lt;- opq(bbox = long_beach_bbox) %&gt;%\n  add_osm_feature(key = \"highway\", \n                  value = c(\"motorway\", \"primary\", \"secondary\", \"tertiary\")) %&gt;%\n  osmdata_sf() %&gt;%\n  .$osm_lines\n\ntitle &lt;- \"Cat and Dog Pickup Locations and Landmarks in Long Beach\"\n\n\np3 &lt;-  ggplot() +\n  geom_sf(data = long_beach_boundary, fill = NA, color = \"black\", size = 1) +\n  geom_sf(data = major_roads, color = \"grey50\", size = 0.8, linetype = \"solid\") +\n  geom_sf(data = animal_sf, aes(color = animal_type), size = 1, alpha = 0.8) +\n  coord_sf(xlim = c(-118.25, -118.10), ylim = c(33.75, 33.80), expand = FALSE) +\n  Custom_Style() +\n  theme(\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank()) +\n  labs(\n       x = \"Longitude\", y = \"Latitude\", subtitle = title, color = \"Animal Type\")\n\ncombined_plot &lt;- (p1 + p2) &\n  theme(legend.position = \"bottom\") &\n  plot_annotation(\n    title = str_wrap('Admittance Data for Long Beach Animal Shelter', 80),\n    subtitle = \"TidyTuesday: Week 9, 2025\",\n    theme = Custom_Style()\n  ) &\n  theme(\n    caption = element_text(hjust = 0.5),\n    plot.subtitle = element_text(size = 16)\n  )\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week09a.png\", \n  plot = combined_plot, \n  height = 1080 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1920 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week09b.png\", \n  plot = p3, \n  height = 400 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1920 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week07.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week07.html",
    "title": "CDC Archive Data Analysis",
    "section": "",
    "text": "Thumbnail\n\nR code\n\nDisplay code# Set Up ------------------------------------------------------------------\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(survival)){install.packages(\"survival\"); library(survival)}\nif(!require(survminer)){install.packages(\"survminer\"); library(survminer)}\nif(!require(ggfortify)){install.packages(\"ggfortify\"); library(ggfortify)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(sysfonts)){install.packages(\"sysfonts\"); library(sysfonts)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\"); library(RColorBrewer)}\nif(!require(maps)){install.packages(\"maps\"); library(maps)}\nif(!require(sf)){install.packages(\"sf\"); library(sf)}\nif(!require(rlist)){install.packages(\"rlist\"); library(rlist)}\n\nwd &lt;- getwd()\n\n\n\n# Graph Style -------------------------------------------------------------\n\n\n\nfont_add_google(\"Roboto Mono\", \"roboto_mono\")\nfont &lt;- \"roboto_mono\"\nshowtext_auto()\n\n# Color palette\ncolor &lt;- palette.colors(palette = \"Okabe-Ito\")\ncolor &lt;- append(color, \"#40B0A6\")\ncolor[1] &lt;- \"#D41159\"\n\n\nCustom_Style &lt;- function() {\n  ggplot2::theme(\n    plot.title = ggplot2::element_text(family=font,\n                                       size=28,\n                                       face=\"bold\",\n                                       color=\"#222222\"),\n    plot.subtitle = ggplot2::element_text(family=font,\n                                          size=20,\n                                          color=\"#222222\"),\n    plot.caption = ggplot2::element_text(family=font,\n                                         size=12,\n                                         color=\"#222222\"),\n    \n    legend.position = \"bottom\",\n    legend.title = ggplot2::element_text(family=font, \n                                         size=12, \n                                         face=\"bold\", \n                                         color=\"#222222\"),\n    # legend.text.align = 0,\n    legend.key = ggplot2::element_blank(),\n    legend.text = ggplot2::element_text(family=font,\n                                        size=9,\n                                        color=\"#222222\"),\n    \n    # Axis format\n    axis.text = ggplot2::element_text(family = font,\n                                      size=10,\n                                      color=\"#222222\"),\n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    axis.title = ggplot2::element_text(family=font, \n                                       size=12, \n                                       face=\"bold\", \n                                       color=\"#222222\"),\n    \n    \n    # Grid lines\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major.y = ggplot2::element_blank(),\n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    # Very pale cream/yellow background\n    panel.background = element_rect(fill = \"#FFFBF0\",  \n                                    color = \"#FFFBF0\", \n                                    linewidth = 0.5, \n                                    linetype = \"solid\"),\n    plot.background = element_rect(fill = \"#FFFBF0\",  \n                                   color = \"#FFFBF0\", \n                                   linewidth = 0.5, \n                                   linetype = \"solid\"),\n    legend.background = element_rect(fill = \"#FFFBF0\",  \n                                     color = \"#FFFBF0\", \n                                     linewidth = 0.5, \n                                     linetype = \"solid\"),\n    \n    \n  )\n}\n\n\n# Load the Data -----------------------------------------------------------\n\n\nagencies &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-18/agencies.csv') %&gt;% \n  mutate(is_nibrs = case_when(\n    is_nibrs == TRUE ~ \"Yes\",\n    is_nibrs == FALSE ~ \"No\",\n    TRUE ~ NA\n  ))\n\n\n# Simple Agency Graph -----------------------------------------------------\n\nstates &lt;- c(\"New York\", \"Texas\", \"Massachusetts\", \"California\", \"Oklahoma\", \"Illinois\")\n\nAgencyType &lt;-agencies %&gt;% \n  filter(state %in% states) %&gt;% \n  group_by(state, agency_type) %&gt;% \n  summarise(n= n())\n\np1 &lt;- AgencyType %&gt;% \n  group_by(state) %&gt;%  # Ensure percentage is calculated within each state\n  mutate(percent = n / sum(n)) %&gt;%  # Compute percent per state\n  ggplot(aes(x = state, y = percent, fill = agency_type)) + \n  geom_bar(stat = \"identity\", position = \"fill\") +  \n  geom_text(aes(label = scales::percent(percent, accuracy = 1)),  \n            position = position_stack(vjust = 0.5),  \n            size = 3,  \n            family = font,  \n            color = \"black\") +  \n  labs(subtitle = str_wrap(\"The percentage of agencies reporting into the NIBRS by state\", 60), x = \"State\", y = \"Percent\", fill =\"State\") +  \n  Custom_Style() +  \n  scale_y_continuous(labels = scales::percent_format()) +  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n\n\n\n# Mapping PD reporting by Masseucsuttes, California New York versus Texas --------------------------------------------------------\n\npolice_data &lt;- agencies %&gt;% \n  select(longitude, latitude, state, is_nibrs, agency_type) %&gt;% \n  filter(!is.na(longitude) & !is.na(latitude))  \n\nsf_data &lt;- st_as_sf(police_data, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\nloop &lt;- map_data(\"state\") %&gt;% \n  filter(region %in% c(\"new york\", \"texas\", \"massachusetts\", \"california\", \"oklahoma\", \"illinois\")) %&gt;% \n  arrange(region)\n\nstate &lt;- unique(loop$region)\n\npolice_state &lt;- sf_data %&gt;% \n  mutate(state = tolower(state)) %&gt;%  # Convert to lowercase\n  filter(state %in% c(\"new york\", \"texas\", \"massachusetts\", \"california\", \"oklahoma\", \"illinois\"))\n\npolicestate &lt;- unique(police_state$state)\n\nlist_of_maps &lt;- list()\ns=2\nfor (s in 1:length(state)) {\n  \n  # Ensure state filtering is correct\n  state_map &lt;- map_data(\"state\") %&gt;% \n    filter(region == state[s])\n  \n  police_filtered &lt;- police_state %&gt;% \n    filter(state == policestate[s])  # Use a fresh filter for each iteration\n  \n  p2 &lt;- ggplot() +\n    geom_polygon(data = state_map, \n                 aes(x = long, y= lat, group = group), fill = color[4]) +\n    geom_sf(data = police_filtered, aes(color = is_nibrs), size = 0.2) +\n    labs(subtitle = str_to_title(state[s]),\n         x = \"Longitude\",\n         y = \"Latitude\",\n         fill = \"Density\",\n         color = \"Reports to NIBRS\") + \n    Custom_Style() +\n    scale_color_manual(values = c(color[1], color[2])) +\n    theme(\n      axis.line = element_blank(),\n      axis.ticks = element_blank(),\n      axis.title = element_blank(),\n      axis.text.x = element_blank(),\n      axis.text.y = element_blank(),\n      panel.grid = element_blank(),\n      plot.title = ggplot2::element_text(family=font,\n                                         size=20,\n                                         face=\"bold\",\n                                         color=\"#222222\")\n    )\n  \n  list_of_maps[[s]] &lt;- p2\n}\n\ncombined &lt;-  wrap_plots(list_of_maps)\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week07a.png\", \n  plot = combined, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week07b.png\", \n  plot = p1, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/TidyTues_Week07a.png\", \n  plot = combined, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/TidyTues_Week07b.png\", \n  plot = p1, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week06.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week06.html",
    "title": "CDC Archive Data Analysis",
    "section": "",
    "text": "R code\n\nDisplay codeif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(survival)){install.packages(\"survival\"); library(survival)}\nif(!require(survminer)){install.packages(\"survminer\"); library(survminer)}\nif(!require(ggfortify)){install.packages(\"ggfortify\"); library(ggfortify)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(sysfonts)){install.packages(\"sysfonts\"); library(sysfonts)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\");library(RColorBrewer)}\n\nfont_add_google(\"Roboto Mono\", \"roboto_mono\")\nfont &lt;- \"roboto_mono\"\nshowtext_auto()\n\n# Color palette\ncolor &lt;- palette.colors(palette = \"Okabe-Ito\")\ncolor &lt;- append(color, \"#40B0A6\")\ncolor[1] &lt;- \"#D41159\"\n\n\nCustom_Style &lt;- function() {\n  ggplot2::theme(\n    plot.title = ggplot2::element_text(family=font,\n                                       size=28,\n                                       face=\"bold\",\n                                       color=\"#222222\"),\n    plot.subtitle = ggplot2::element_text(family=font,\n                                          size=20,\n                                          color=\"#222222\"),\n    plot.caption = ggplot2::element_text(family=font,\n                                         size=12,\n                                         color=\"#222222\"),\n    \n    legend.position = \"bottom\",\n    legend.title = ggplot2::element_text(family=font, \n                                         size=12, \n                                         face=\"bold\", \n                                         color=\"#222222\"),\n    # legend.text.align = 0,\n    legend.key = ggplot2::element_blank(),\n    legend.text = ggplot2::element_text(family=font,\n                                        size=9,\n                                        color=\"#222222\"),\n    \n    # Axis format\n    axis.text = ggplot2::element_text(family = font,\n                                      size=10,\n                                      color=\"#222222\"),\n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10)),\n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    axis.title = ggplot2::element_text(family=font, \n                                         size=12, \n                                         face=\"bold\", \n                                         color=\"#222222\"),\n    \n    \n    # Grid lines\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major.y = ggplot2::element_blank(),\n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    # Very pale cream/yellow background\n    panel.background = element_rect(fill = \"#FFFBF0\",  \n                                    color = \"#FFFBF0\", \n                                    linewidth = 0.5, \n                                    linetype = \"solid\"),\n    plot.background = element_rect(fill = \"#FFFBF0\",  \n                                   color = \"#FFFBF0\", \n                                   linewidth = 0.5, \n                                   linetype = \"solid\"),\n    legend.background = element_rect(fill = \"#FFFBF0\",  \n                                     color = \"#FFFBF0\", \n                                     linewidth = 0.5, \n                                     linetype = \"solid\"),\n    \n    \n  )\n}\n\n\n\n\ncdc_datasets &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-11/cdc_datasets.csv')\nfpi_codes &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-11/fpi_codes.csv')\nomb_codes &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-11/omb_codes.csv')\n\n\n\nAgency &lt;- omb_codes %&gt;% \n  group_by(agency_name) %&gt;% \n  summarise(n = n()) %&gt;% \n  arrange(desc(n)) %&gt;% \n  slice(1: 10)\n\np1 &lt;- Agency %&gt;% \n  ggplot(aes(x = fct_reorder(agency_name, n, .desc = TRUE), y = n)) +   # Explicitly set y to n\n  geom_col(aes(fill = as.factor(agency_name))) +   # Use geom_col() instead of geom_bar()\n  labs(subtitle = str_wrap(\"CDC Database Archiving: Top 10 Agencies  that have archived databases since 2016\", 40), x = \"Agency Name\", y = \"Count (n)\", fill = \"Agency Name\") + \n  geom_text(aes(label = paste0(\"n = \", n)), \n            vjust = -0.5,   # Position above the bar\n            size = 4,       # Adjusted size for better readability\n            family = font) +\n  Custom_Style() +\n  scale_fill_manual(values = color) +\n  scale_x_discrete(labels = function(x) str_wrap(x, width =10)) +\n  theme(legend.position = \"none\",\n    legend.title = element_blank(),\n        axis.text.x = element_text(size = 6))\n\ntimeline_data &lt;- cdc_datasets %&gt;% \n  mutate(\n    level_of_access = case_when(\n      public_access_level %in% c(\"public\", \"public domain\") ~ \"Public Access\",\n      public_access_level == \"restricted public\" ~ \"Restricted Access\",\n      public_access_level == \"non-public\" ~ \"No Public Access\",\n      TRUE ~ \"Unspecified\"\n    ),\n    issued = as.Date(issued)\n  )  %&gt;% \n  filter(!is.na(issued)) |&gt;\n  arrange(issued) %&gt;% \n  mutate(\n    Time_to_Archiv = as.numeric(issued - min(issued)),\n    Evt = 1,\n    archival_date = min(issued) + Time_to_Archiv\n  )\n\n\nmin &lt;- min(timeline_data$issued)\n\nkm_fit &lt;- survfit(Surv(Time_to_Archiv, Evt) ~ 1, data = timeline_data)\n\nkm_df &lt;- data.frame(\n  time = km_fit$time,\n  survival = km_fit$surv,\n  cumulative_events = 1 - km_fit$surv,\n  archival_date = min(timeline_data$issued) + km_fit$time\n)\n\np2 &lt;- ggplot(km_df, aes(x = archival_date, y = cumulative_events)) +\n  geom_step(color = \"#40B0A6\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +  # Format x-axis as years\n  labs(x = \"Year\", y = \"Archival Events\", subtitle = str_wrap(\"Kaplan-Meier Curve of Archiving of CDC Databases\", 40), caption = \"Each step signifies an increase in database archiving \\n TidyTuesday: Week 6, 2025\") +\n  Custom_Style() +\n  theme(axis.text.y = element_blank())\n\np1\n\n\n\n\n\n\nDisplay codep2\n\n\n\n\n\n\nDisplay codep_combined &lt;- p1 + p2 \n\n\np_combined +\n  Custom_Style() +\n  plot_annotation(title = \"CDC Database Archiving Analysis\",\n                  theme = Custom_Style()) +\n  theme(caption = element_text(hjust =  0.5))\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data_visualisations/TidyTuesday/2025/TidyTues_Week08.html",
    "href": "data_visualisations/TidyTuesday/2025/TidyTues_Week08.html",
    "title": "TidyTuesday Week 8:",
    "section": "",
    "text": "Figure 1\n\n\nDisplay code# gc()\n# rm(list = ls())\n# graphics.off()\n# cat('\\014')\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(ggfortify)){install.packages(\"ggfortify\"); library(ggfortify)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(sysfonts)){install.packages(\"sysfonts\"); library(sysfonts)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\"); library(RColorBrewer)}\nif(!require(maps)){install.packages(\"maps\"); library(maps)}\nif(!require(rcrossref)){install.packages(\"rcrossref\"); library(rcrossref)}\n\nwd &lt;- getwd()\n\n\nfont_add_google(\"Roboto Mono\", \"roboto_mono\")\nfont &lt;- \"roboto_mono\"\nshowtext_auto()\n\n# Color palette\ncolor &lt;- palette.colors(palette = \"Okabe-Ito\")\ncolor &lt;- append(color, \"gold\")\ncolor[1] &lt;- \"#D41159\"\n\n\nCustom_Style &lt;- function() {\n  ggplot2::theme(\n    plot.title = ggplot2::element_text(family=font,\n                                       size=24,\n                                       face=\"bold\",\n                                       color=\"#222222\"),\n    plot.subtitle = ggplot2::element_text(family=font,\n                                          size=18,\n                                          color=\"#222222\"),\n    plot.caption = ggplot2::element_text(family=font,\n                                         size=10,\n                                         color=\"#222222\"),\n    \n    legend.position = \"bottom\",\n    legend.title = ggplot2::element_text(family=font, \n                                         size=12, \n                                         face=\"bold\", \n                                         color=\"#222222\"),\n    # legend.text.align = 0,\n    legend.key = ggplot2::element_blank(),\n    legend.text = ggplot2::element_text(family=font,\n                                        size=9,\n                                        color=\"#222222\"),\n    \n    # Axis format\n    axis.text = ggplot2::element_text(family = font,\n                                      size=10,\n                                      color=\"#222222\"),\n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    axis.title = ggplot2::element_text(family=font, \n                                       size=12, \n                                       face=\"bold\", \n                                       color=\"#222222\"),\n    \n    \n    # Grid lines\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major.y = ggplot2::element_blank(),\n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    # Very pale cream/yellow background\n    panel.background = element_rect(fill = \"#FFFBF0\",  \n                                    color = \"#FFFBF0\", \n                                    linewidth = 0.5, \n                                    linetype = \"solid\"),\n    plot.background = element_rect(fill = \"#FFFBF0\",  \n                                   color = \"#FFFBF0\", \n                                   linewidth = 0.5, \n                                   linetype = \"solid\"),\n    legend.background = element_rect(fill = \"#FFFBF0\",  \n                                     color = \"#FFFBF0\", \n                                     linewidth = 0.5, \n                                     linetype = \"solid\"),\n    \n    \n  )\n}\n\n\narticle_dat &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-25/article_dat.csv')\nmodel_dat &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-25/model_dat.csv')\n\n# Data Cleaning \n\n#Fucntion to simplify races\n\nsimplify_race &lt;- function(race) {\n  case_when(\n    grepl(\"African American|Black|NonBlack, Non-Hispanic Black\", race, ignore.case = TRUE) ~ \"Black\",\n    grepl(\"White|Caucasian|Non-Hispanic White\", race, ignore.case = TRUE) ~ \"White\",\n    grepl(\"Asian\", race, ignore.case = TRUE) ~ \"Asian\",\n    grepl(\"Hispanic|Latino\", race, ignore.case = TRUE) ~ \"Hispanic\",\n    grepl(\"Native American|Alaskan\", race, ignore.case = TRUE) ~ \"Native American\",\n    grepl(\"Pacific Islander|Hawaiian\", race, ignore.case = TRUE) ~ \"Pacific Islander\",\n    grepl(\"Unknown|Other|Multiple\", race, ignore.case = TRUE) ~ \"Other\",\n    TRUE ~ NA\n  )\n}\n\n# function to extract study title from doi using crossref package\n\nget_study_info &lt;- function(doi) {\n  \n  res &lt;- cr_works(doi = doi)\n  \n  if (is.null(res$data)) {\n    return(list(title = NA, first_author = NA))\n  }\n  \n  title &lt;- res$data$title\n  \n  authors &lt;- res$data$author\n  first_author &lt;- if(!is.null(authors) && length(authors) &gt; 0) {\n    \n    authors[[1]]$family\n    \n  } else {\n    \n    NA\n    \n  }\n  \n  doi &lt;-res$data$doi\n  \n  return(list(title = title, first_author = first_author, doi = doi))\n  \n}\n\n# Publications mentioning Race --------------------------------------------\n\n\nrace_count &lt;- article_dat %&gt;% \n  mutate(across(starts_with(c(\"race\", \"eth\")), simplify_race)) %&gt;% \n  rowwise() %&gt;%\n  group_by(across(starts_with(c(\"race\", \"eth\")))) %&gt;% \n  summarise() %&gt;%\n  pivot_longer(cols = everything(), values_to = \"race\") %&gt;% \n  filter(!is.na(race) & race != \"NA\") %&gt;% \n  count(race, sort = TRUE)  \n\np1 &lt;- race_count %&gt;% \n  ggplot(aes(x = reorder(race, n), y = n, fill = race)) +  \n  geom_bar(stat = \"identity\") +  \n  geom_text(aes(label = paste0(\"n = \", n), fontface = \"bold\"), hjust = -0.1, size = 3, angle = 0) +  # Add text labels on top of bars\n  labs(subtitle = str_wrap(\"Race Count Distribution of Reproductive Rights studies in the US (2010-2023)\", 40),\n       x = \"Race\",\n       y = \"Count\",\n       fill = \"Race\") +\n  Custom_Style() +\n  coord_flip()  \n\n\n\n\n\nrace_year_count &lt;- article_dat %&gt;%\n  mutate(across(starts_with(c(\"race\", \"eth\")), simplify_race)) %&gt;%\n  pivot_longer(cols = starts_with(c(\"race\", \"eth\")), values_to = \"race\", names_to = \"race_column\") %&gt;%\n  filter(!is.na(race) & race != \"NA\" & race != \"\") %&gt;%\n  group_by(year, race) %&gt;%\n  summarise(n = n(), .groups = 'drop') %&gt;% \n  group_by(year) %&gt;% \n  mutate(percent = n / sum(n)) %&gt;% \n  arrange(desc(percent)) %&gt;% \n  ungroup()\n\n\n\np2 &lt;- race_year_count %&gt;% \n  ggplot(aes(x = year, y = percent, fill = race)) +  \n  geom_col() +\n  geom_text(aes(label = scales::percent(percent, accuracy = 1), fontface = \"bold\"),  \n            position = position_stack(vjust = 0.5),  \n            size = 3,  \n            family = font,\n            color = \"black\") +  \n  labs(subtitle = str_wrap(\"Proportion of Articles related to Reproductive rights mentioning each race (2010-2023)\", 40),\n       x = \"Race\",\n       y = \"Percent\", fill =\"Race\") +  \n  Custom_Style() +  \n  scale_y_continuous(labels = scales::percent_format())\n\n\n# Combined Plot\n\n\n# Clean the data\n\n\ndata &lt;- model_dat %&gt;%\n  filter(\n    subanalysis == \"No\",\n    measure == \"OR\",          # Ensures reference group includes 'White'\n    !grepl(\"none\", covariates, ignore.case = TRUE),     # Filters out rows where covariates is 'none'\n    outcome == \"severe maternal morbidity\",\n    model_number == 5\n  ) %&gt;% \n  mutate(doi = factor(doi))\n\ndoi &lt;- unique(factor(data$doi))\nd = 1\n\n\ndata_i &lt;- data %&gt;% \n  filter(compare != \"Unknown\") \n\n\ndata_i &lt;- data_i %&gt;%\n  rowwise() %&gt;%\n  mutate(info = list(get_study_info(doi)),\n         citation = paste0(info$first_author[[1]], \" et. al: \", info$doi)) %&gt;% \n  select(-info) \n\nmeasure &lt;- unique(data_i$measure)\nendpoint &lt;- unique(data_i$outcome)\nstudy_title &lt;- unique(data_i$citation)\n\n\n\np3 &lt;- ggplot(data_i, aes(x = point, y = reorder(compare, point))) +  \n  geom_point(size = 3, aes(color = compare)) +  # Points for estimates\n  geom_errorbarh(aes(xmin = lower, xmax = upper, color = compare), height = 0.2) +  # Confidence intervals\n  geom_vline(xintercept = 1, linetype = \"dashed\", color = \"red\") +  # Reference line at 1\n  labs(subtitle = paste0('Forest Plot: ', str_to_title(endpoint), \" compared with White Women\"),\n       x = paste0(measure, \" (95% CI)\"),\n       y = \"Comparison Group\",\n       color = \"Race\", \n       caption = paste(\"Doi: \", study_title, collapse = \"\\n\")\n  ) +\n  annotate(\"text\", x = 0.5, y = length(unique(data_i$compare)) + 0.5, label = \"Favourable compared with White Women\", color = \"green\", hjust = 0) +\n  annotate(\"text\", x = 1.5, y = length(unique(data_i$compare)) + 0.5, label = \"Outcomes Worsened compared with White Women\", color = \"red\", hjust = 1) +\n  facet_wrap(~ paste(citation, sep = \": \"), labeller = labeller(group = function(x) str_wrap(x, width = 20))) +\n  Custom_Style() +\n  theme(\n    strip.background = element_rect(fill = \"#FFFBF0\", color = \"#FFFBF0\"), # Green background with white border\n    strip.text = element_text(size = 8, face = \"bold\", color = \"black\", family = font, hjust = 0) # White bold text\n  )\n\n\n\n# Combine plots with legend between p1/p2 and p3\ncombined_plot &lt;- (p1 + p2) / \n  p3 +\n  plot_layout(\n    guides = \"collect\"\n  ) &\n  theme(legend.position = \"bottom\") &\n  plot_annotation(\n    title = str_wrap('Academic Literature on Racial and Ethnic Disparities in Reproductive Medicine in the US', 80),\n    subtitle = \"TidyTuesday: Week 8, 2025\",\n    theme = Custom_Style()\n  ) &\n  theme(\n    caption = element_text(hjust = 0.5),\n    plot.subtitle = element_text(size = 16)\n  )\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "I am a statistical programmer with 7 years experience in Pharmaceutical Market Access and Health Economics. I have a Masters Degree in Epidemiology from the Charit√© ‚Äì Universit√§tsmedizin Berlin and a Master‚Äôs in Biomedical Research from Cardiff University.\nI fell into R and Python Programming coupled with data analysis and have kept going with it."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "",
    "section": "",
    "text": "I am a statistical programmer with 7 years experience in Pharmaceutical Market Access and Health Economics. I have a Masters Degree in Epidemiology from the Charit√© ‚Äì Universit√§tsmedizin Berlin and a Master‚Äôs in Biomedical Research from Cardiff University.\nI fell into R and Python Programming coupled with data analysis and have kept going with it."
  },
  {
    "objectID": "index.html#skills-and-interests",
    "href": "index.html#skills-and-interests",
    "title": "",
    "section": "Skills and Interests",
    "text": "Skills and Interests\n\nBiostatistics, R, Python, Data Analysis, Data Visualisation, GIS, Epidemiology, Market Access, Health Economics"
  },
  {
    "objectID": "maps/middle_earth.html",
    "href": "maps/middle_earth.html",
    "title": "Lord of the Rings: Scale of Middle Earth",
    "section": "",
    "text": "#### 1. R code\n\nShow codeif(!require(yaml)){install.packages(\"yaml\"); library(yaml)}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(ggplot2)){install.packages(\"ggplot2\"); library(ggplot2)}\n# if needed and on Linux apt-get -y update && apt-get install -y  libudunits2-dev libgdal-dev libgeos-dev libproj-dev\nif(!require(sf)){install.packages(\"sf\"); library(sf)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(rnaturalearthdata)){install.packages(\"rnaturalearthdata\"); library(rnaturalearthdata)}\nif(!require(rnaturalearth)){install.packages(\"rnaturalearth\"); library(rnaturalearth)}\nif(!require(ggspatial)){install.packages(\"ggspatial\"); library(ggspatial)}\nif(!require(scales)){install.packages(\"scales\"); library(scales)}\nif(!require(leaflet)){install.packages(\"leaflet\"); library(leaflet)}\nif(!require(glue)){install.packages(\"glue\"); library(glue)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(knitr)){install.packages(\"knitr\"); library(knitr)}\nif(!require(ggrepel)){install.packages(\"ggrepel\"); library(ggrepel)}\n\n# Colour Scheme\ncustom_colors &lt;- c(\n  \"#004225\", \"#00007d\", \"#D4A5A5\", \"#1B998B\", \"#F2E86D\", \"#F25F5C\", \"#247BA0\",  \n  \"#662E9B\"\n)\n\n# Custom Theme\ncustom_theme &lt;- function() {\n  ggplot2::theme(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5, color = \"#000036\"),\n    axis.title.x = element_text(face = \"bold\", size = 10),\n    axis.title.y = element_text(face = \"bold\", size = 10),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.line = element_line(linewidth  = 0.5, colour = \"darkgrey\"),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 10)\n    \n  )\n}\n\n# Custom Fonts \n\nfont_add(family = \"Aniron\", regular = \"/home/pgr16/Documents/Coding/Middle Earth/Fonts/anirm___.ttf\")\nshowtext_auto()\n\nfont_add(family = \"Celtic\", regular = \"/home/pgr16/Documents/Coding/Middle Earth/Fonts/UncialAntiqua-Regular.ttf\")\nshowtext_auto()\n\nworld_map &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/World Countries/ne_50m_admin_0_countries.shp\")\n\ncoastline &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Coastline2.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\ncontours &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Contours_18.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nrivers &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Rivers.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nroads &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Roads.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nlakes &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Lakes.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nregions &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Regions_Anno.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nforests &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Forests.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nmountains &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Mountains_Anno.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nplacenames &lt;- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Combined_Placenames.shp\") |&gt; \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nlist &lt;- c(\"Hobbiton\", \"Rivendell\", \"Edoras\", \"Minas Tirith\", \"Bay of Bafalas\", \"Bay of Umbar\", \"Fangorn\", \"Grey Havens\", \"Helm's Deep\", \"Isengard\", \"L√≥rien\", \"Mirkwood\", \"Mt Doom\", \"Sea of Rhun\", \"Mt Doom\")\n\nmiles_to_meters &lt;- function(x) {\n  x * 1609.344\n}\n\nmeters_to_miles &lt;- function(x) {\n  x / 1609.344\n}\n\nclr_green &lt;- \"#035711\"\nclr_blue &lt;- \"#0776e0\"\nclr_yellow &lt;- \"#fffce3\"\n\nhobbiton &lt;- placenames |&gt; \n  filter(NAME == \"Hobbiton\") |&gt; \n  mutate(geometry_x =  map_dbl(geometry, ~as.numeric(.)[1]),\n  geometry_y = map_dbl(geometry, ~as.numeric(.)[2])) |&gt; \n    select(LAYER, NAME, geometry_x, geometry_y)\n\n# Format numeric coordinates with degree symbols and cardinal directions\nformat_coords &lt;- function(coords) {\n  ns &lt;- ifelse(coords[[1]][2] &gt; 0, \"N\", \"S\")\n  ew &lt;- ifelse(coords[[1]][1] &gt; 0, \"E\", \"W\")\n  \n  glue(\"{latitude}¬∞{ns} {longitude}¬∞{ew}\",\n       latitude = sprintf(\"%.6f\", coords[[1]][2]),\n       longitude = sprintf(\"%.6f\", coords[[1]][1]))\n}\n\n\n\neurope_window &lt;- st_sfc(\n  st_point(c(-12.4, 29.31)),  # left (west), bottom (south)\n  st_point(c(44.74, 64.62)),  # right (east), top (north)\n  crs = st_crs(\"EPSG:4326\")   # WGS 84\n) %&gt;% \n  st_transform(crs = st_crs(\"EPSG:5633\")) %&gt;%  # LAEA Europe, centered in Portugal\n  st_coordinates()\n\neurope_plot &lt;- ggplot() +\n  geom_sf(data = world_map, fill = \"#004225\", alpha = 0.5) +\n    coord_sf(crs = st_crs(\"EPSG:5633\"),\n           xlim = europe_window[, \"X\"],\n           ylim = europe_window[, \"Y\"],\n           expand = FALSE) +\n            custom_theme() +\n            labs(\"Map of Europe\")\n\n\ncardiff &lt;- tribble(\n  ~place, ~lat, ~long,\n  \"Cardiff\", 51.481583,  -3.179090\n) %&gt;% \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(\"EPSG:4326\")) \n\n# Convert the Tolkien home coordinates to European coordinates\ncardiff &lt;- cardiff %&gt;% \n  st_transform(crs = st_crs(\"EPSG:5633\"))\n\n# Convert the Hobbiton coordinates to European coordinates\n\nhobbiton_in_europe &lt;- hobbiton %&gt;% \n  st_transform(st_crs(\"EPSG:5633\"))\n\n# Find the offset between Tolkien's home and Hobbiton\nme_to_europe &lt;- st_coordinates(cardiff) - st_coordinates(hobbiton_in_europe)\n\nme_places_in_europe &lt;- placenames %&gt;% \n  # Make the Middle Earth data match the Europe projection\n  st_transform(st_crs(\"EPSG:5633\")) %&gt;%\n  # Just look at a handful of places\n  filter(NAME %in% c(\"Hobbiton\", \"Rivendell\", \"Edoras\", \"Minas Tirith\", \"Mt Doom\")) %&gt;% \n  # Double the distances\n  st_set_geometry((st_geometry(.) - st_geometry(hobbiton_in_europe)) * 2 + st_geometry(hobbiton_in_europe)) %&gt;% \n  # Shift everything around so that Hobbiton is in Oxford\n  st_set_geometry(st_geometry(.) + me_to_europe) %&gt;% \n  # All the geometry math made us lose the projection metadata; set it again\n  st_set_crs(st_crs(\"EPSG:5633\"))\n\ncoastline_in_europe &lt;- coastline %&gt;% \n  st_transform(st_crs(\"EPSG:5633\")) %&gt;%\n  st_set_geometry((st_geometry(.) - st_geometry(hobbiton_in_europe)) * 2 + st_geometry(hobbiton_in_europe)) %&gt;% \n  st_set_geometry(st_geometry(.) + me_to_europe) %&gt;% \n  st_set_crs(st_crs(\"EPSG:5633\"))\n\n\neurope_me_plot &lt;- ggplot() + \n  geom_sf(data = world_map, fill = \"#004225\", alpha = 0.5, color = \"white\", linewidth = 0.25) +\n  geom_sf(data = coastline_in_europe, linewidth = 0.25, fill = \"#39CCCC\") +\n  geom_sf(data = me_places_in_europe, fill = \"#39CCCC\", alpha = 0.5) +\n  geom_text_repel(data = filter(me_places_in_europe, NAME %in% list), \n                  aes(label = NAME, geometry = geometry), \n                  stat = \"sf_coordinates\",\n                  nudge_x = -70000, hjust = 1, \n                  family = \"Aniron\", fontface = \"plain\", size = rel(10),\n                  box.padding = 0.5, # Space around labels\n                  point.padding = 0.5, # Space around labeled points\n                  max.overlaps = 10) + # Adjust to control label repulsion\n  coord_sf(crs = st_crs(\"EPSG:5633\"),\n           xlim = europe_window[, \"X\"],\n           ylim = europe_window[, \"Y\"],\n           expand = FALSE) +\n  theme_void() +\n  labs(title = str_wrap(\"Plot of Middle Earth Superimposed over the map of Europe\", 40), \n       subtitle = \"Hobbiton is centred on the great city of Cardiff\") +\n  theme(plot.background = element_rect(fill = clr_yellow),\n        plot.title = element_text(family = \"Aniron\", size = rel(4), hjust = 0.02),\n        plot.subtitle = element_text(family = \"Aniron\", size = rel(2), hjust = 0.02))\n\n\n\n\n\n Back to top"
  }
]