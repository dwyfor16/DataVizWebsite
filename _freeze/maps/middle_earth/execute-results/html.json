{
  "hash": "9aff106151e54a54935fb5d2422bff60",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lord of the Rings: Scale of Middle Earth\"\nsubtitle: \"A visuaisation of how big Middle Earth is compared with the size of Europe. Sam and Frodo walked a long way! Hobbiton is centered on Cardiff in Wales - just because\"\nauthor: \"Peter Gray\"\ncategories: [\"GIS\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [GIS, R, data visulation, ggplot2, Map work, tidyverse]\nimage: \"thumbnails/middle-earth.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n\n![Thumbnail](thumbnails/middle-earth.png)\n#### 1. R code\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(yaml)){install.packages(\"yaml\"); library(yaml)}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(ggplot2)){install.packages(\"ggplot2\"); library(ggplot2)}\n# if needed and on Linux apt-get -y update && apt-get install -y  libudunits2-dev libgdal-dev libgeos-dev libproj-dev\nif(!require(sf)){install.packages(\"sf\"); library(sf)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(rnaturalearthdata)){install.packages(\"rnaturalearthdata\"); library(rnaturalearthdata)}\nif(!require(rnaturalearth)){install.packages(\"rnaturalearth\"); library(rnaturalearth)}\nif(!require(ggspatial)){install.packages(\"ggspatial\"); library(ggspatial)}\nif(!require(scales)){install.packages(\"scales\"); library(scales)}\nif(!require(leaflet)){install.packages(\"leaflet\"); library(leaflet)}\nif(!require(glue)){install.packages(\"glue\"); library(glue)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(knitr)){install.packages(\"knitr\"); library(knitr)}\nif(!require(ggrepel)){install.packages(\"ggrepel\"); library(ggrepel)}\n\n# Colour Scheme\ncustom_colors <- c(\n  \"#004225\", \"#00007d\", \"#D4A5A5\", \"#1B998B\", \"#F2E86D\", \"#F25F5C\", \"#247BA0\",  \n  \"#662E9B\"\n)\n\n# Custom Theme\ncustom_theme <- function() {\n  ggplot2::theme(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5, color = \"#000036\"),\n    axis.title.x = element_text(face = \"bold\", size = 10),\n    axis.title.y = element_text(face = \"bold\", size = 10),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.line = element_line(linewidth  = 0.5, colour = \"darkgrey\"),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 10)\n    \n  )\n}\n\n# Custom Fonts \n\nfont_add(family = \"Aniron\", regular = \"/home/pgr16/Documents/Coding/Middle Earth/Fonts/anirm___.ttf\")\nshowtext_auto()\n\nfont_add(family = \"Celtic\", regular = \"/home/pgr16/Documents/Coding/Middle Earth/Fonts/UncialAntiqua-Regular.ttf\")\nshowtext_auto()\n\nworld_map <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/World Countries/ne_50m_admin_0_countries.shp\")\n\ncoastline <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Coastline2.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\ncontours <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Contours_18.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nrivers <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Rivers.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nroads <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Roads.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nlakes <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Lakes.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nregions <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Regions_Anno.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nforests <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Forests.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nmountains <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Mountains_Anno.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nplacenames <- read_sf(\"/home/pgr16/Documents/Coding/Middle Earth/Middle Earth/Combined_Placenames.shp\") |> \n  mutate(across(where(is.character), ~iconv(., from = \"ISO-8859-1\", to = \"UTF-8\")))\n\nlist <- c(\"Hobbiton\", \"Rivendell\", \"Edoras\", \"Minas Tirith\", \"Bay of Bafalas\", \"Bay of Umbar\", \"Fangorn\", \"Grey Havens\", \"Helm's Deep\", \"Isengard\", \"Lórien\", \"Mirkwood\", \"Mt Doom\", \"Sea of Rhun\", \"Mt Doom\")\n\nmiles_to_meters <- function(x) {\n  x * 1609.344\n}\n\nmeters_to_miles <- function(x) {\n  x / 1609.344\n}\n\nclr_green <- \"#035711\"\nclr_blue <- \"#0776e0\"\nclr_yellow <- \"#fffce3\"\n\nhobbiton <- placenames |> \n  filter(NAME == \"Hobbiton\") |> \n  mutate(geometry_x =  map_dbl(geometry, ~as.numeric(.)[1]),\n  geometry_y = map_dbl(geometry, ~as.numeric(.)[2])) |> \n    select(LAYER, NAME, geometry_x, geometry_y)\n\n# Format numeric coordinates with degree symbols and cardinal directions\nformat_coords <- function(coords) {\n  ns <- ifelse(coords[[1]][2] > 0, \"N\", \"S\")\n  ew <- ifelse(coords[[1]][1] > 0, \"E\", \"W\")\n  \n  glue(\"{latitude}°{ns} {longitude}°{ew}\",\n       latitude = sprintf(\"%.6f\", coords[[1]][2]),\n       longitude = sprintf(\"%.6f\", coords[[1]][1]))\n}\n\n\n\neurope_window <- st_sfc(\n  st_point(c(-12.4, 29.31)),  # left (west), bottom (south)\n  st_point(c(44.74, 64.62)),  # right (east), top (north)\n  crs = st_crs(\"EPSG:4326\")   # WGS 84\n) %>% \n  st_transform(crs = st_crs(\"EPSG:5633\")) %>%  # LAEA Europe, centered in Portugal\n  st_coordinates()\n\neurope_plot <- ggplot() +\n  geom_sf(data = world_map, fill = \"#004225\", alpha = 0.5) +\n    coord_sf(crs = st_crs(\"EPSG:5633\"),\n           xlim = europe_window[, \"X\"],\n           ylim = europe_window[, \"Y\"],\n           expand = FALSE) +\n            custom_theme() +\n            labs(\"Map of Europe\")\n\n\ncardiff <- tribble(\n  ~place, ~lat, ~long,\n  \"Cardiff\", 51.481583,  -3.179090\n) %>% \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(\"EPSG:4326\")) \n\n# Convert the Tolkien home coordinates to European coordinates\ncardiff <- cardiff %>% \n  st_transform(crs = st_crs(\"EPSG:5633\"))\n\n# Convert the Hobbiton coordinates to European coordinates\n\nhobbiton_in_europe <- hobbiton %>% \n  st_transform(st_crs(\"EPSG:5633\"))\n\n# Find the offset between Tolkien's home and Hobbiton\nme_to_europe <- st_coordinates(cardiff) - st_coordinates(hobbiton_in_europe)\n\nme_places_in_europe <- placenames %>% \n  # Make the Middle Earth data match the Europe projection\n  st_transform(st_crs(\"EPSG:5633\")) %>%\n  # Just look at a handful of places\n  filter(NAME %in% c(\"Hobbiton\", \"Rivendell\", \"Edoras\", \"Minas Tirith\", \"Mt Doom\")) %>% \n  # Double the distances\n  st_set_geometry((st_geometry(.) - st_geometry(hobbiton_in_europe)) * 2 + st_geometry(hobbiton_in_europe)) %>% \n  # Shift everything around so that Hobbiton is in Oxford\n  st_set_geometry(st_geometry(.) + me_to_europe) %>% \n  # All the geometry math made us lose the projection metadata; set it again\n  st_set_crs(st_crs(\"EPSG:5633\"))\n\ncoastline_in_europe <- coastline %>% \n  st_transform(st_crs(\"EPSG:5633\")) %>%\n  st_set_geometry((st_geometry(.) - st_geometry(hobbiton_in_europe)) * 2 + st_geometry(hobbiton_in_europe)) %>% \n  st_set_geometry(st_geometry(.) + me_to_europe) %>% \n  st_set_crs(st_crs(\"EPSG:5633\"))\n\n\neurope_me_plot <- ggplot() + \n  geom_sf(data = world_map, fill = \"#004225\", alpha = 0.5, color = \"white\", linewidth = 0.25) +\n  geom_sf(data = coastline_in_europe, linewidth = 0.25, fill = \"#39CCCC\") +\n  geom_sf(data = me_places_in_europe, fill = \"#39CCCC\", alpha = 0.5) +\n  geom_text_repel(data = filter(me_places_in_europe, NAME %in% list), \n                  aes(label = NAME, geometry = geometry), \n                  stat = \"sf_coordinates\",\n                  nudge_x = -70000, hjust = 1, \n                  family = \"Aniron\", fontface = \"plain\", size = rel(10),\n                  box.padding = 0.5, # Space around labels\n                  point.padding = 0.5, # Space around labeled points\n                  max.overlaps = 10) + # Adjust to control label repulsion\n  coord_sf(crs = st_crs(\"EPSG:5633\"),\n           xlim = europe_window[, \"X\"],\n           ylim = europe_window[, \"Y\"],\n           expand = FALSE) +\n  theme_void() +\n  labs(title = str_wrap(\"Plot of Middle Earth Superimposed over the map of Europe\", 40), \n       subtitle = \"Hobbiton is centred on the great city of Cardiff\") +\n  theme(plot.background = element_rect(fill = clr_yellow),\n        plot.title = element_text(family = \"Aniron\", size = rel(4), hjust = 0.02),\n        plot.subtitle = element_text(family = \"Aniron\", size = rel(2), hjust = 0.02))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}