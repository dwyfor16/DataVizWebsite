{
  "hash": "03235c80c6d344a3dda0fedeb86503a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rugby: 6 Nation Rugby Results\"\nsubtitle: \"An Analysis of the results between the teams who compete in the 6 Nations Championship\"\ndate-created: \"2025-02-17\"\nauthor: \"Peter Gray\"\ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\", \"Rugby\"]\ntags: [tidytuesday, R, data visulation, ggplot2, patchwork, tidyverse, sports]\nimage: \"thumbnails/WalesversusIreland.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n![Figure](thumbnails/WalesversusIreland.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(ggplot2)){install.packages(\"ggplot2\"); library(ggplot2)}\nif(!require(scales)){install.packages(\"scales\"); library(scales)}\nif(!require(sysfonts)){install.packages(\"sysfonts\"); library(sysfonts)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(ggpp)){install.packages(\"ggpp\"); library(ggpp)}\nif(!require(grid)){install.packages(\"grid\"); library(grid)}\nif(!require(magick)){install.packages(\"magick\"); library(magick)}\n\n\nwd <- getwd()\n\nresults <- read.csv(\"~/Documents/Coding/Website/data_visualisations/RugbyResults/Data/results.csv\")\n\nfont_add_google(\"Roboto Mono\", \"roboto_mono\")\nfont <- \"roboto_mono\"\nshowtext_auto()\n\nCustom_Style <- function() {\n  ggplot2::theme(\n    plot.title = ggplot2::element_text(family=font,\n                                       size=28,\n                                       face=\"bold\",\n                                       color=\"#222222\"),\n    plot.subtitle = ggplot2::element_text(family=font,\n                                          size=20,\n                                          color=\"#222222\"),\n    plot.caption = ggplot2::element_text(family=font,\n                                         size=12,\n                                         color=\"#222222\"),\n    \n    legend.position = \"bottom\",\n    legend.title = ggplot2::element_text(family=font, \n                                         size=12, \n                                         face=\"bold\", \n                                         color=\"#222222\"),\n    # legend.text.align = 0,\n    legend.key = ggplot2::element_blank(),\n    legend.text = ggplot2::element_text(family=font,\n                                        size=9,\n                                        color=\"#222222\"),\n    \n    # Axis format\n    axis.text = ggplot2::element_text(family = font,\n                                      size=10,\n                                      color=\"#222222\"),\n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    axis.title = ggplot2::element_text(family=font, \n                                       size=12, \n                                       face=\"bold\", \n                                       color=\"#222222\"),\n    \n    \n    # Grid lines\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major.y = ggplot2::element_blank(),\n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    # Very pale cream/yellow background\n    panel.background = element_rect(fill = \"#FFFBF0\",  \n                                    color = \"#FFFBF0\", \n                                    linewidth = 0.5, \n                                    linetype = \"solid\"),\n    plot.background = element_rect(fill = \"#FFFBF0\",  \n                                   color = \"#FFFBF0\", \n                                   linewidth = 0.5, \n                                   linetype = \"solid\"),\n    legend.background = element_rect(fill = \"#FFFBF0\",  \n                                     color = \"#FFFBF0\", \n                                     linewidth = 0.5, \n                                     linetype = \"solid\"),\n    \n    \n  )\n}\n\n\nwinner_colors <- c(\"Wales\" = \"#C8102E\", \"Ireland\" = \"#00985A\", \"Scotland\" = \"#000080\", \"England\" = \"white\",\n                   \"France\" = \"#21304D\", \"Italy\" = \"#1f4fa2\", \"Draw\" = \"black\")\n\nSixnations <- c(\"Wales\", \"England\", \"Italy\", \"France\", \"Scotland\", \"Ireland\")\n\nSixNationsResults <- results %>% \n  select(date, competition, home_team, away_team, home_score, away_score, world_cup) %>% \n  filter(home_team %in% Sixnations, away_team %in% Sixnations) %>%\n  filter(!str_detect(competition, \"warm\")) %>%  #No World Cui\n  filter(!str_detect(competition, \"Autumn\"))  \n\n\nSixNationsResults <- SixNationsResults %>%\n  mutate(Who_Won = case_when(\n    home_score > away_score ~ home_team,\n    away_score > home_score ~ away_team,\n    home_score == away_score ~ \"Draw\",\n    TRUE ~ NA_character_\n  )) %>% \n  mutate(Who_Won = factor(Who_Won))\n\nSixNationsResults <- SixNationsResults %>% \n  mutate(decade = floor(year(date) / 10) * 10, .after = date) %>% \n  group_by(decade) %>% \n  arrange(date) %>%  \n  ungroup()\n\n# Iterate through all combinations of teams\nall_matchups <- expand.grid(home_team = Sixnations, away_team = Sixnations, stringsAsFactors = FALSE) %>%\n  filter(home_team != away_team)\n\n\n# Creating a list to store filtered match results for each matchup\nmatch_results_list <- list()\ni=1\n\nfor (i in 1:nrow(all_matchups)) {\n  current_home <- all_matchups$home_team[i]\n  current_away <- all_matchups$away_team[i]\n  \n  # Filter the dataframe for each matchup\n  filtered_matches <- SixNationsResults %>%\n    filter(\n      (home_team == current_home & away_team == current_away) |\n        (home_team == current_away & away_team == current_home)\n    ) %>%\n    filter(!str_detect(competition, \"warm\")) %>%\n    filter(!str_detect(competition, \"Autumn\"))\n  \n  # Store in list\n  match_results_list[[paste0(current_home, \"_vs_\", current_away)]] <- filtered_matches\n}\n\n\n\n\n\n\n\ni = 1\n\nlist_of_plots <- list()\n\nfor (i in 1:length(match_results_list)) {\n  \n  df <- as.data.frame(match_results_list[[i]]) %>% \n    group_by(decade) %>% \n    mutate(game_number_in_decade = row_number()) %>% \n    ungroup()\n  \n  winner <- unique(df$Who_Won) \n  winner <- setdiff(winner, \"Draw\")\n  n = 1\n  \n  biggest_win_table  <- data.frame()\n  \n  for (n in 1:length(winner)) {\n    wins <- df %>%\n      filter(Who_Won == winner[[n]] & Who_Won != \"Draw\") %>%\n      mutate(win_margin = abs(home_score - away_score)) %>%\n      mutate(date = format(as.Date(date, format = \"%Y-%m-%d\"), \"%d-%m-%Y\"))\n    \n    # Ensure 'wins' dataframe is used for further filtering\n    wins <- wins\n    \n    biggest_win <- wins %>%\n      arrange(desc(win_margin)) %>%\n      slice(1) %>%\n      mutate(biggest_win = paste0(home_score, \"-\", away_score, \" (\", date, \")\")) %>%\n      select(biggest_win) %>%\n      mutate(Country = winner[[n]])\n    \n    biggest_win_table <- bind_rows(biggest_win_table, biggest_win)\n  }\n  \n  # Total number of games played by each team\n  total_games <- df %>% \n    filter(Who_Won != \"Draw\") %>%\n    group_by(Who_Won) %>%\n    summarise(total_games = n())\n  \n  # Number of games df by each team\n  games_won <- df %>%\n    filter(Who_Won != \"Draw\") %>%\n    group_by(Who_Won) %>%\n    summarise(games_won = n())\n  \n  # Calculate the win percentage\n  win_percentage <- games_won %>%\n    inner_join(total_games, by = \"Who_Won\") %>%\n    mutate(total_games = sum(total_games)) %>% \n    mutate(win_percentage = (games_won / total_games * 100)) %>% \n    rename(Country = Who_Won) \n  \n  data_for_graph <- merge(win_percentage, biggest_win_table, by =\"Country\") %>% \n    select(-c(total_games)) %>% \n    arrange(desc(games_won)) %>% \n    rename(`Number of Games Won` = games_won,\n           `Win percentage` = win_percentage,\n           `Biggest Win (date)` = biggest_win) %>% \n    mutate(`Win percentage` = percent(`Win percentage` /100)) \n  \n  # Identify the World Cup Games\n  \n  World_Cup_Games <- df %>% \n    filter(world_cup == \"True\") %>% \n    select(decade, game_number_in_decade)\n  \n  # Stuff for the Graph\n  \n  graph_winner <- unique(df$Who_Won) \n  \n  graph_colours <- winner_colors[names(winner_colors) %in% graph_winner]\n  \n  min_year <- format(as.Date(min(df$date)), \"%Y\")\n  max_year <- format(as.Date(max(df$date)), \"%Y\")\n  \n # Convert decade to numeric and find the middle decade\n  number_decades <- df %>% \n    group_by(decade) %>% \n    summarise(n = n_distinct(decade)) %>% \n    nrow()\n  \n  midpoint <- number_decades/2\n  \n  # table height\n  \n max_n <- df %>% \n  group_by(decade) %>% \n  summarise(n = n()) %>% \n  summarise(max_n = max(n)) %>% \n  pull(max_n)\n    \n  \n  p1 <- ggplot(df, aes(y = game_number_in_decade, x = factor(decade), fill = Who_Won)) +\n    geom_tile(color = \"black\") +  # Black border around tiles\n    scale_fill_manual(values = graph_colours) +  # Apply custom colors\n    geom_text(aes(label = paste0(home_score, \" - \", away_score)),  \n              color = alpha(\"grey\", 0.75),  \n              size = 6,\n              fontface = \"bold\") +\n    geom_tile(data = World_Cup_Games, \n              aes(x = factor(decade), y = game_number_in_decade), \n              color = \"yellow\",\n              linewidth = 1, \n              fill = NA,\n              height = 1, # Adjust height to make the yellow boxes smaller\n              width = 1) +  # Adjust width to make the yellow boxes smaller\n    labs(\n      x = \"Decade\",\n      y = \"Number of Games\",\n      fill = \"Victor\",\n      title = paste0(\"Historical Results of \", winner[1],  \" versus \", winner[2], \" (\", min_year,\"-\", max_year, \")\"),\n      caption = \"Yellow = World Cup Game (Excludes World Cup Warm Up Games)\"\n    ) +\n    Custom_Style() +\n    scale_x_discrete(labels = function(x) paste0(x, \"s\")) +\n    annotate(geom = \"table\", x = midpoint, y = max_n +5, label = list(data_for_graph), \n         vjust = 1, hjust = 0.5, color = alpha(\"black\", 0.5),\n         table.theme = ttheme_gtplain(title = \"Highest and Lowest Rated Episodes\",\n                                      base_colour = \"black\", color = \"#FFFBF0\", base_size = 16, \n                                      base_family = \"roboto_mono\", \n                                      core = list(bg_params = list(fill = \"#FFFBF0\")), \n                                      colhead = list(bg_params = list(fill = \"#FFFBF0\"))))\n  \n  \n  p1\n  \n  list_of_plots <- append(list_of_plots, p1)\n  names(list_of_plots)[length(list_of_plots)] <- paste0(winner[1],  \"versus\", winner[2])\n  \n  ggsave(paste0(winner[1],  \"versus\", winner[2],\".png\"), plot = p1, width = 15, height = 10, units = \"cm\",\n         path = paste0(\"~/Documents/Coding/Website/data_visualisations/RugbyResults/Images\"), create.dir = TRUE)\n  \n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}