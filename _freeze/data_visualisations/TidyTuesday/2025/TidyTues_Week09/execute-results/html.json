{
  "hash": "1f66269672af9791953b61f9bc514b71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TidyTuesday Week 9: Long Beach Animal Shelter\"\nsubtitle: \"This week we're exploring the Long Beach Animal Shelter Data! The dataset comes from the City of Long Beach Animal Care Services via the {animalshelter} R package. This dataset comprises of the intake and outcome record from Long Beach Animal Shelter.\"\nauthor: \"Peter Gray\"\ndate: \"2025-03-04\"\ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [tidytuesday, R, data visulisation, ggplot2, patchwork, tidyverse]\nimage: \"thumbnails/TidyTues_Week09a.png\"\nformat:\n  html:\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Display code\"\n    self-contained: true\neditor_options:\n  chunk_output_type: console\nexecute:\n  freeze: true                                                 \n  cache: true                                                  \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n\n\n\n![Figure 1](thumbnails/TidyTues_Week09a.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gc()\n# \n# rm(list = ls())\n# \n# graphics.off()\n# \n# cat('\\014')\n# \n\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\n\nif(!require(ggbrick)){install.packages(\"ggbrick\"); library(ggbrick)}\n\nif(!require(ggfortify)){install.packages(\"ggfortify\"); library(ggfortify)}\n\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\n\nif(!require(sysfonts)){install.packages(\"sysfonts\"); library(sysfonts)}\n\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\n\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\"); library(RColorBrewer)}\n\nif(!require(maps)){install.packages(\"maps\"); library(maps)}\n\nif(!require(rcrossref)){install.packages(\"rcrossref\"); library(rcrossref)}\n\nif(!require(ggshadow)){install.packages(\"ggshadow\"); library(ggshadow)}\n\nif(!require(ggridges)){install.packages(\"ggridges\"); library(ggridges)}\n\nif(!require(ggpp)){install.packages(\"ggpp\"); library(ggpp)}\n\nif(!require(gridExtra)){install.packages(\"gridExtra\"); library(gridExtra)}\n\nif(!require(sf)){install.packages(\"sf\"); library(sf)}\n\nif(!require(ggmap)){install.packages(\"ggmap\"); library(ggmap)}\nif(!require(osmdata)){install.packages(\"osmdata\"); library(osmdata)}\n\nwd <- getwd()\n\n\n\n\n\nfont_add_google(\"Noto Sans Mono\", \"noto_mono\")\n\nfont <- \"noto_mono\"\n\nshowtext_auto()\n\n\n\n# Color palette\n\ncolor <- palette.colors(palette = \"Okabe-Ito\")\n\ncolor <- append(color, \"gold\")\n\ncolor[1] <- \"#D41159\"\n\n\n\n\n\nCustom_Style <- function() {\n  \n  ggplot2::theme(\n    \n    plot.title = ggplot2::element_text(family=font,\n                                       \n                                       size=24,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    plot.subtitle = ggplot2::element_text(family=font,\n                                          \n                                          size=18,\n                                          \n                                          color=\"#222222\"),\n    \n    plot.caption = ggplot2::element_text(family=font,\n                                         \n                                         size=10,\n                                         \n                                         color=\"#222222\"),\n    \n    \n    \n    legend.position = \"bottom\",\n    \n    legend.title = ggplot2::element_text(family=font,\n                                         \n                                         size=12,\n                                         \n                                         face=\"bold\",\n                                         \n                                         color=\"#222222\"),\n    \n    # legend.text.align = 0,\n    \n    legend.key = ggplot2::element_blank(),\n    \n    legend.text = ggplot2::element_text(family=font,\n                                        \n                                        size=9,\n                                        \n                                        color=\"#222222\"),\n    \n    \n    \n    # Axis format\n    \n    axis.text = ggplot2::element_text(family = font,\n                                      \n                                      size=10,\n                                      \n                                      color=\"#222222\"),\n    \n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    \n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    \n    axis.title = ggplot2::element_text(family=font,\n                                       \n                                       size=12,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    \n    \n    \n    \n    # Grid lines\n    \n    panel.grid.minor = ggplot2::element_blank(),\n    \n    panel.grid.major.y = ggplot2::element_blank(),\n    \n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    \n    \n    \n    \n    # Very pale cream/yellow background\n    \n    panel.background = element_rect(fill = \"#FFFBF0\", \n                                    \n                                    color = \"#FFFBF0\",\n                                    \n                                    linewidth = 0.5,\n                                    \n                                    linetype = \"solid\"),\n    \n    plot.background = element_rect(fill = \"#FFFBF0\", \n                                   \n                                   color = \"#FFFBF0\",\n                                   \n                                   linewidth = 0.5,\n                                   \n                                   linetype = \"solid\"),\n    \n    legend.background = element_rect(fill = \"#FFFBF0\", \n                                     \n                                     color = \"#FFFBF0\",\n                                     \n                                     linewidth = 0.5,\n                                     \n                                     linetype = \"solid\"),\n    \n    \n    \n    \n    \n  )\n  \n}\n\n\n\n\n\nlongbeach <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv')  \n\n\n\n\n\n# Dogs\n\n\n\n# simple function to merge colours\n\n\n\nsimplify_color <- function(color) {\n  \n  color <- tolower(color)  # Convert to lowercase for consistency\n  \n  \n  \n  case_when(\n    \n    str_detect(color, \"white|cream|silver\") ~ \"White/Silver\",\n    \n    str_detect(color, \"brown|chocolate|tan|fawn|liver\") ~ \"Brown/Tan\",\n    \n    str_detect(color, \"black|seal|black smoke\") ~ \"Black\",\n    \n    str_detect(color, \"gray|blue|blue brindle|blue merle|blue tick\") ~ \"Gray/Blue\",\n    \n    str_detect(color, \"red|ruddy|red merle|orange|apricot\") ~ \"Red/Orange\",\n    \n    str_detect(color, \"yellow|yellow brindle|gold|wheat|blondebuff\") ~ \"Golden\",\n    \n    str_detect(color, \"sable|dapple|brindle|tiger|tricolor\") ~ \"Patterned\",\n    \n    TRUE ~ \"Other\"  # Default category for unexpected values\n    \n  )\n  \n}\n\n\n\n\n\ndogs <- longbeach %>%\n  \n  filter(animal_type == \"dog\") %>%\n  \n  filter(primary_color != \"unknown\" | primary_color != \"pink\") %>%\n  \n  mutate(year = floor(year(as.Date(intake_date))), .after = intake_date) %>%\n  \n  select(animal_type, primary_color, year) %>%\n  \n  mutate(color = simplify_color(primary_color)) %>%\n  \n  select(-c(primary_color))\n\n\n\n\n\ndog_colors <- c(\n  \n  \"White/Silver\" = \"#dcdcdc\",\n  \n  \"Brown/Tan\" = \"#987456\",\n  \n  \"Gray/Blue\" = \"#7e99b4\",\n  \n  \"Golden\" = \"#f7c66b\",\n  \n  \"Black\" = alpha(\"black\",0.75),\n  \n  \"Patterned\" = \"#ffb7c5\",\n  \n  \"Red/Orange\" = \"peru\",\n  \n  \"Other\" = \"#cc3333\"\n  \n  \n  \n)\n\n\n\nsubtitle <- \"The colour of dogs admitted to the Long Beach Animal Shelter over the years\"\n\n\n\np1 <- dogs %>%\n  \n  count(animal_type, color, year) %>%\n  \n  mutate(n = n / 10) %>%\n  \n  ggplot() +\n  \n  geom_waffle0(aes(x = year, y = n, fill = color), gap = 0.015) +\n  \n  scale_x_continuous(breaks = unique(dogs$year)) +  # Ensure all years are displayed\n  \n  scale_fill_manual(values = dog_colors) +\n  \n  Custom_Style() +\n  labs(x = \"Year\", y = \"Count (x10)\", fill = \"Dog Colour\", subtitle = str_wrap(subtitle, 60)) +\n  \n  theme(legend.position = \"right\")\n\n\n#How long pets stay\n\nexcl_animal <- c(\"rabbit\", \"bird\", \"amphibian\", \"wild\", \"other\", \"livestock\")\nadpotion_reasons <- c(\"adoption\", \"return to owner\", \"foster to adopt\")\n\n\ntime <- longbeach %>%\n  \n  filter(!animal_type %in% excl_animal ) %>%\n  filter(outcome_type %in% adpotion_reasons ) %>%\n  \n  \n  select(animal_type, intake_date, outcome_date) %>%\n  \n  mutate(time_in_shelter = outcome_date - intake_date,\n         \n         animal_type = str_to_title(animal_type))\n\n\n\n\n\n\n\nmax_stay <- time %>%\n  \n  group_by(animal_type) %>%\n  \n  summarise(max_time = max(time_in_shelter, na.rm = TRUE))\n\n\n\nsubtitle <- \"Average length of stay for animals in the Long Beach Animal Shelter to being adopted\"\n\n\n\n\n\n# Convert duration to numeric (in days)\n\ntime <- time %>%\n  \n  mutate(time_in_shelter_numeric = as.numeric(time_in_shelter, units = \"days\"))\n\n\n\n# Compute max stay per animal type (in numeric form)\n\nmax_stay <- time %>%\n  \n  group_by(animal_type) %>%\n  \n  summarise(Max_Stay = max(time_in_shelter_numeric, na.rm = TRUE)) %>%\n  \n  rename(\"Type of Animal\" = animal_type,\n         \n         \"Maximum Length of Stay Before Adoption (Days)\" = Max_Stay)\n\n\n\n# Create the violin plot and annotate with table\n\np2 <- ggplot(time, aes(x = time_in_shelter_numeric, y = animal_type, fill = animal_type)) +\n  \n  geom_violin(alpha = 0.8) +\n  \n  scale_x_continuous(limits = c(-10, 365),\n                     \n                     breaks = seq(0, 365, by = 90),\n                     \n                     expand = c(0,0)) +\n  \n  annotate(geom = \"table\", x = 365/2, y = length(max_stay$`Maximum Length of Stay (Days)` ) + 1, label = list(max_stay),\n           \n           vjust = 1, hjust = 0, family = \"Permanent Marker\", color = alpha(\"black\", 0.5),\n           \n           table.theme = ttheme_minimal(\n                                        \n                                        base_colour = \"black\", base_family = \"noto_mono\", color = \"#FFFBF0\",base_size = 14,\n                                        \n                                        core=list(bg_params = list(fill = \"#FFFBF0\")),\n                                        \n                                        colhead = list(bg_params = list(fill = \"#FFFBF0\")))) +\n  \n  labs(x = \"Time Animal is in Shelter (Days)\", y = \"Animal Type\", fill = \"Animal Type\", subtitle = str_wrap(subtitle, 60)) +\n  \n  Custom_Style()\n\n\n\n\n\n\n# Geographcial location\n\nanimal_pickup <- longbeach %>%\n  \n  filter(animal_type == \"dog\" | animal_type == \"cat\") %>% \n  mutate(animal_type = str_to_title(animal_type)) %>% \n  select(animal_type, longitude, latitude) \n\nanimal_sf <- st_as_sf(animal_pickup, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n\n# Define the long beach boundary (googled)\nlong_beach_bbox <- c(-118.25, 33.75, -118.10, 33.80)\n\n#\nlong_beach_boundary <- opq(bbox = long_beach_bbox) %>%\n  add_osm_feature(key = \"boundary\", value = \"administrative\") %>%\n  add_osm_feature(key = \"name\", value = \"Long Beach\") %>%\n  osmdata_sf() %>%\n  .$osm_multipolygons\n\n\n# Fetch major roads (primary, secondary, and tertiary)\nmajor_roads <- opq(bbox = long_beach_bbox) %>%\n  add_osm_feature(key = \"highway\", \n                  value = c(\"motorway\", \"primary\", \"secondary\", \"tertiary\")) %>%\n  osmdata_sf() %>%\n  .$osm_lines\n\ntitle <- \"Cat and Dog Pickup Locations and Landmarks in Long Beach\"\n\n\np3 <-  ggplot() +\n  geom_sf(data = long_beach_boundary, fill = NA, color = \"black\", size = 1) +\n  geom_sf(data = major_roads, color = \"grey50\", size = 0.8, linetype = \"solid\") +\n  geom_sf(data = animal_sf, aes(color = animal_type), size = 1, alpha = 0.8) +\n  coord_sf(xlim = c(-118.25, -118.10), ylim = c(33.75, 33.80), expand = FALSE) +\n  Custom_Style() +\n  theme(\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank()) +\n  labs(\n       x = \"Longitude\", y = \"Latitude\", subtitle = title, color = \"Animal Type\")\n\ncombined_plot <- (p1 + p2) &\n  theme(legend.position = \"bottom\") &\n  plot_annotation(\n    title = str_wrap('Admittance Data for Long Beach Animal Shelter', 80),\n    subtitle = \"TidyTuesday: Week 9, 2025\",\n    theme = Custom_Style()\n  ) &\n  theme(\n    caption = element_text(hjust = 0.5),\n    plot.subtitle = element_text(size = 16)\n  )\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week09a.png\", \n  plot = combined_plot, \n  height = 1080 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1920 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week09b.png\", \n  plot = p3, \n  height = 400 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1920 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}