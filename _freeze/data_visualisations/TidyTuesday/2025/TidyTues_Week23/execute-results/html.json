{
  "hash": "c4fd5945aaaa65ae0502c9f56ad307f3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"TidyTuesday Week 23: US Judges\"\nsubtitle: \"This week we're exploring U. S. judge data from the {historydata} R package! This dataset contains information about the appointments and careers of all federal judges in United States history since 1789.\"\nauthor: \"Peter Gray\"\ndate: \"2025-06-15\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"Python\", \"Pandas\", \"Polars\", \"Numpy\", \"2025\"]\ntags: [tidytuesday, Python, data visulation, pandas, polars, numpy]\nimage: \"thumbnails/TidyTues_Week23.png\"\nformat:\n  html:\n    toc: true \n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n<a href=\"https://dwyfor16.quarto.pub/us-judges-dashboard/\" target=\"_blank\">\n  <img src=\"thumbnails/TidyTues_Week23.png\" alt=\"Chart\" style=\"max-width: 100%;\" />\n</a>\n\n\n#### 1. Python code\n\n::: {#setup .cell execution_count=2}\n``` {.python .cell-code}\n# ! pip install polars\n# ! pip install pandas\n# ! pip install numpy\n# ! pip install folium\n# ! pip install geopy\nimport polars as pl\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.io as pio\nimport matplotlib.pyplot as plt\n\npio.templates.default = 'plotly_white'\n\n\njudges_appointments = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-10/judges_appointments.csv')\njudges_people = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-10/judges_people.csv')\n\nmerged_df = pd.merge(judges_appointments, judges_people, on = 'judge_id', how = 'left')\nmerged_df[\"commission_date\"] = pd.to_datetime(merged_df[\"commission_date\"], format=\"%m/%d/%Y\")\nmerged_df = merged_df.assign(Non_white = np.where(merged_df[\"race\"] != \"White\", \"Non-White\", \"White\"))\n\n# Top 100  judges per apppointment\n\ntop10 = pd.DataFrame(merged_df.groupby(['president_name']).president_name.value_counts().nlargest(10)).reset_index()\ntop10.columns = ['president_name', 'count']\npio.templates.default = 'plotly_white'\n\n# NUmber of judges per party\nparties = [\"Democratic\", \"Republican\"]\n\nparty = merged_df[merged_df[\"president_party\"].isin(parties)]\nparties = pd.DataFrame(party.groupby(\"president_party\").size()).reset_index()\nparties.columns = ['president_party', 'count']\n\nfig, ax = plt.subplots(figsize=(10, 6)); \nbars = ax.bar(x=top10['president_name'], height=top10['count'], color='skyblue')\nax.set_xlabel('President Name')\nax.set_ylabel('Number of Appointments per President')\nax.set_title('Top 10 Presidents by Number of Appointments')\nax.tick_params(axis='x', rotation=45)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(\n        f'{int(height)}',\n        xy=(bar.get_x() + bar.get_width() / 2, height),\n        xytext=(0, 3),  # Offset above bar\n        textcoords='offset points',\n        ha='center',\n        va='bottom',\n        fontsize=9,\n        color='black'\n    )\n    \n    \nplt.tight_layout()\n\n# By Politcial PArty\nparty_colors = {\n    \"Democratic\": \"blue\",\n    \"Republican\": \"red\"\n}\n\ncolors = parties['president_party'].map(party_colors)\n\n# Create plot\nfig1, ax = plt.subplots(figsize=(10, 6));\nbars = ax.bar(x=parties['president_party'], height=parties['count'], color=colors)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.set_xlabel('Political Party')\nax.set_ylabel('Number of Appointments per Party')\nax.set_title('Number of Appointments by Political Party')\nax.tick_params(axis='x', rotation=0)\n\n# Add count labels on top of bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(\n        f'{int(height)}',\n        xy=(bar.get_x() + bar.get_width() / 2, height),\n        xytext=(0, 3),\n        textcoords='offset points',\n        ha='center',\n        va='bottom',\n        fontsize=9,\n        color='black'\n    )\n    \nplt.tight_layout()\n\n\nfemale_judge_percent = merged_df.groupby(\"gender\").size()\npercent_df = female_judge_percent.div(female_judge_percent.sum()).mul(100)\n\ndict(\n  value = f\"{round(percent_df.get('F', 0), 1)}%\"\n)\n\n\n\ncut_off = pd.to_datetime(\"1969-01-01\")\n\npre_1968 = merged_df[merged_df[\"commission_date\"] <= cut_off]\n\n\nnon_white_number = pre_1968.groupby(\"Non_white\").size()\nnon_White_percent = non_white_number.div(non_white_number.sum()).mul(100)\n\ndict(\n  value = f\"{round(non_White_percent.get('Non-White', 0), 1)}%\"\n);\n\n\n\n\nrepub = merged_df[merged_df[\"president_party\"].isin([\"Republican\", \"Democratic\"])]\nrepub_number = repub.groupby(\"president_party\").size()\nrepub_percent = repub_number.div(repub_number.sum()).mul(100)\n\ndict(\n  value = f\"{round(repub_percent.get('Republican', 0), 1)}%\"\n);\n\n```\n:::\n\n\n",
    "supporting": [
      "TidyTues_Week23_files"
    ],
    "filters": [],
    "includes": {}
  }
}