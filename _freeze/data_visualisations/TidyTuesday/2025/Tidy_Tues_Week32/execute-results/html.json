{
  "hash": "31c036af1a124845c265077d6170d6ce",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"TidyTuesday Week 32: Extreme Weather Attribution Studies\"\nsubtitle: \"This week we're exploring extreme weather attribution studies. The dataset comes from Carbon Brief's article Mapped: How climate change affects extreme weather around the world\"\nauthor: \"Peter Gray\"\ndate: \"2025-08-05\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"Python\" , \"2025\"]\ntags: [tidytuesday, data visulation, Python Programming, Pandas]\nimage: \"thumbnails/TidyTues_Week32.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n:::\n#### 1. Python code\n\n::: {#a4f13ebe .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport folium\nimport base64\nfrom io import BytesIO\n\n\nattribution_studies = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-08-12/attribution_studies.csv')\nattribution_studies_raw = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-08-12/attribution_studies_raw.csv')\n\n\nclassification_colors = {\n    \"More severe or more likely to occur\": \"#e41a1c\",\n    \"Decrease, less severe or less likely to occur\": \"#377eb8\",\n    \"No discernible human influence\": \"#4daf4a\",\n}\n\ndf = attribution_studies_raw[attribution_studies_raw[\"iso_country_code\"].notnull()]\ndf = df[df[\"classification\"] != \"Insufficient data/inconclusive\"]\ndf = df[df[\"cb_region\"].str.contains(\"Heisphere\")==False]\n\n\ndf[\"classification\"]\n\n\ndf = df.explode(\"iso_country_code\")\n\n\ndf[\"iso_country_code\"] = df[\"iso_country_code\"].str.strip()\n\ncounts = df.groupby(['cb_region', 'classification']).size().reset_index(name='count')\n\npivot_counts = counts.pivot(index='cb_region',\n                             columns='classification',\n                             values='count').fillna(0)\n\n\npivot_percent = pivot_counts.div(pivot_counts.sum(axis=1), axis=0) * 100\n\n\nax = pivot_percent.plot(\n    kind='bar',\n    stacked=True,\n    figsize=(8, 5),\n    color=[classification_colors.get(col, \"#cccccc\") for col in pivot_percent.columns]\n)\n\n\nfor container in ax.containers:\n    labels = [f\"{v.get_height():.1f}%\" if v.get_height() > 0 else \"\" for v in container]\n    ax.bar_label(container, labels=labels, label_type='center', fontsize=8, color=\"white\")\n\nplt.ylabel('Percentage')\nplt.xlabel(\"Region\")\nplt.title('Percentage by Region and Classification')\nplt.legend(\n    title='Classification',\n    loc='lower right',\n    bbox_to_anchor=(1.5, -1)\n)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Tidy_Tues_Week32_files/figure-html/cell-2-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "Tidy_Tues_Week32_files"
    ],
    "filters": [],
    "includes": {}
  }
}