{
  "hash": "f8c67c2a166392388cba7e5009fb5a10",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"TidyTuesday Week 36: Henley Passport Index Data\"\nsubtitle: \"This week we are exploring data from the Henley Passport Index API. The Henley Passport Index is produced by Henley & Partners and captures the number of countries to which travelers in possession of each passport in the world may enter visa free.\"\nauthor: \"Peter Gray\"\ndate: \"2025-09-08\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"Python Programming\", \"2025\", \"streamlit\", \"dashboard\"]\ntags: [tidytuesday, Python, data visulation, ggplot2, tidyverse, streamlit, dashboard]\nimage: \"thumbnails/TidyTues_Week36a.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n![Chart](thumbnails/TidyTues_Week36a.png){#fig-singlechart}\nFIgure of my passport app\n:::\n\n#### 1. Python code\n\n::: {#8aa05dcc .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport streamlit as st\nimport plotly.express as px\nimport pycountry\nimport ast\n\ncountry_lists = pd.read_csv(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-09/country_lists.csv\"\n)\nrank_by_year = pd.read_csv(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-09/rank_by_year.csv\"\n)\n\n\nvisa_columns = [\n    \"visa_required\",\n    \"visa_online\",\n    \"visa_on_arrival\",\n    \"visa_free_access\",\n    \"electronic_travel_authorisation\",\n]\n\nvisa_columns_map = {\n    \"Visa Required\": \"visa_required\",\n    \"eVisa (Online Application)\": \"visa_online\",\n    \"Visa on Arrival\": \"visa_on_arrival\",\n    \"Visa Free Access\": \"visa_free_access\",\n    \"Electronic Travel Authorisation (ETA)\": \"electronic_travel_authorisation\",\n}\n\nfor col in visa_columns:\n    country_lists[col] = country_lists[col].apply(\n        lambda x: ast.literal_eval(x) if pd.notnull(x) else []\n    )\n\n\ntab1, tab2 = st.tabs(\n    [\"📊 Change in Visa Ranking Graph\", \"🌍 Interactive Visa Requirements Map\"]\n)\n\nwith tab1:\n    st.subheader(\"Change in Country Visa Ranking over time\")\n    default = [\"France\", \"Germany\", \"Italy\", \"Spain\", \"United Kingdom\", \"United States\"]\n    countries = sorted(rank_by_year[\"country\"].unique())\n\n    # set up the containers\n    with st.container(border=True):\n        country = st.multiselect(\"Countries\", countries, default=default)\n\n    data = (\n        rank_by_year[rank_by_year[\"country\"].isin(country)]\n        .pivot(index=\"year\", columns=\"country\", values=\"rank\")\n        .sort_index()\n    )\n\n    plotly_data = data.reset_index().melt(\n        id_vars=\"year\", var_name=\"country\", value_name=\"rank\"\n    )\n\n    rank_fig = px.line(\n        plotly_data,\n        x=\"year\",\n        y=\"rank\",\n        color=\"country\",\n        labels={\n            \"year\": \"Year\",\n            \"rank\": \"Visa Free Access Rank\",\n            \"country\": \"Country\",\n        },\n        title=\"Country Visa Free Access Rank Over Time\",\n    )\n    rank_fig.update_yaxes(autorange=\"reversed\")\n\n    # ✅ display inside tab1\n    st.plotly_chart(rank_fig, use_container_width=True)\n\nwith tab2:\n    st.subheader(\"Interactive Visa Map\")\n\n    # Sort the Data\n    country_lists[\"country\"] = sorted(country_lists[\"country\"])\n\n    # Dropdown for selecting home country\n    home_country = st.selectbox(\n        \"Select your country of citizenship:\", country_lists[\"country\"]\n    )\n\n    visa_label = st.selectbox(\n        \"Select the Visa Requirement of Interest:\", list(visa_columns_map.keys())\n    )\n    visa_type = visa_columns_map[visa_label]\n\n    # Extract destinations for selected visa type\n    destinations_raw = country_lists.loc[\n        country_lists[\"country\"] == home_country, visa_type\n    ].values[0]\n\n    # Flatten nested [[{...}]] → [{...}]\n    if (\n        isinstance(destinations_raw, list)\n        and len(destinations_raw) == 1\n        and isinstance(destinations_raw[0], list)\n    ):\n        destinations_raw = destinations_raw[0]\n\n    if isinstance(destinations_raw, list) and len(destinations_raw) > 0:\n        df_map = pd.DataFrame(destinations_raw)\n\n        # Convert alpha-2 → alpha-3\n        def alpha2_to_alpha3(alpha2):\n            try:\n                return pycountry.countries.get(alpha_2=alpha2).alpha_3\n            except:\n                return None\n\n        df_map[\"iso_alpha3\"] = df_map[\"code\"].apply(alpha2_to_alpha3)\n        df_map = df_map.dropna(subset=[\"iso_alpha3\"])\n\n        if not df_map.empty:\n            fig = px.choropleth(\n                df_map,\n                locations=\"iso_alpha3\",\n                hover_name=\"name\",\n                color_discrete_sequence=[\"#0083B8\"],\n                title=f\"{visa_type.replace('_',' ').title()} Destinations for {home_country}\",\n            )\n            st.plotly_chart(fig, use_container_width=True)\n        else:\n            st.warning(f\"No {visa_type} destinations found for {home_country}.\")\n    else:\n        st.warning(f\"No {visa_type} data available for {home_country}.\")\n\n    st.write(\n        f\"**Countries with {visa_type.replace('_',' ').title()} for {home_country}:**\"\n    )\n    df_map = df_map[[\"name\", \"code\"]].rename(\n        columns={\"name\": \"Name\", \"code\": \"2 Digit Country Code\"}\n    )\n    st.dataframe(df_map[[\"Name\", \"2 Digit Country Code\"]])\n\n```\n:::\n\n\n",
    "supporting": [
      "TidyTues_Week36_files"
    ],
    "filters": [],
    "includes": {}
  }
}