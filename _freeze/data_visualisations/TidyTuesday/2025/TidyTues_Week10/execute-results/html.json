{
  "hash": "4428e16be8403e1493fefa881a48d71b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TidyTuesday Week 10: Pixar Films Analysis\"\nsubtitle: \"This week we're exploring Pixar films! The data this week comes from the {pixarfilms} R package by Eric Leung.\"\nauthor: \"Peter Gray\"\ndate: \"2025-03-17\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [tidytuesday, R, data visulation, ggplot2, patchwork, tidyverse, risk-analysis]\nimage: \"thumbnails/TidyTues_Week10.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n\n![Thumbnail](thumbnails/TidyTues_Week10.png)\n\n#### 1. R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the packages in ----------------------------------------------------\n\nif(!require(httr)){install.packages(\"httr\"); library(httr)}\nif(!require(jsonlite)){install.packages(\"jsonlite\"); library(jsonlite)}\nif(!require(withr)){install.packages(\"withr\"); library(withr)}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\n\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(gridExtra)){install.packages(\"gridExtra\"); library(gridExtra)}\nif(!require(grid)){install.packages(\"grid\"); library(grid)}\nif(!require(cowplot)){install.packages(\"cowplot\"); library(cowplot)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(ggpmisc)){install.packages(\"ggpmisc\"); library(ggpmisc)}\nif(!require(rlist)){install.packages(\"rlist\"); library(rlist)}\n\n# get the wd\nwd <- getwd()\n\n\npixar_films <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')\npublic_response <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')\n\n\n\n\nfont_add_google(\"Noto Sans Mono\", \"noto_mono\")\n\nfont <- \"noto_mono\"\n\nshowtext_auto()\n\n\n\n# Color palette\n\ncolor <- palette.colors(palette = \"Okabe-Ito\")\n\ncolor <- append(color, \"gold\")\n\ncolor[1] <- \"#D41159\"\n\n\n\n\n\nCustom_Style <- function() {\n  \n  ggplot2::theme(\n    \n    plot.title = ggplot2::element_text(family=font,\n                                       \n                                       size=24,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    plot.subtitle = ggplot2::element_text(family=font,\n                                          \n                                          size=18,\n                                          \n                                          color=\"#222222\"),\n    \n    plot.caption = ggplot2::element_text(family=font,\n                                         \n                                         size=10,\n                                         \n                                         color=\"#222222\"),\n    \n    \n    \n    legend.position = \"bottom\",\n    \n    legend.title = ggplot2::element_text(family=font,\n                                         \n                                         size=12,\n                                         \n                                         face=\"bold\",\n                                         \n                                         color=\"#222222\"),\n    \n    # legend.text.align = 0,\n    \n    legend.key = ggplot2::element_blank(),\n    \n    legend.text = ggplot2::element_text(family=font,\n                                        \n                                        size=9,\n                                        \n                                        color=\"#222222\"),\n    \n    \n    \n    # Axis format\n    \n    axis.text = ggplot2::element_text(family = font,\n                                      \n                                      size=10,\n                                      \n                                      color=\"#222222\"),\n    \n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    \n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    \n    axis.title = ggplot2::element_text(family=font,\n                                       \n                                       size=12,\n                                       \n                                       face=\"bold\",\n                                       \n                                       color=\"#222222\"),\n    \n    \n    \n    \n    \n    # Grid lines\n    \n    panel.grid.minor = ggplot2::element_blank(),\n    \n    panel.grid.major.y = ggplot2::element_blank(),\n    \n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    \n    \n    \n    \n    # Very pale cream/yellow background\n    \n    panel.background = element_rect(fill = \"#FFFBF0\", \n                                    \n                                    color = \"#FFFBF0\",\n                                    \n                                    linewidth = 0.5,\n                                    \n                                    linetype = \"solid\"),\n    \n    plot.background = element_rect(fill = \"#FFFBF0\", \n                                   \n                                   color = \"#FFFBF0\",\n                                   \n                                   linewidth = 0.5,\n                                   \n                                   linetype = \"solid\"),\n    \n    legend.background = element_rect(fill = \"#FFFBF0\", \n                                     \n                                     color = \"#FFFBF0\",\n                                     \n                                     linewidth = 0.5,\n                                     \n                                     linetype = \"solid\"),\n    \n    \n    \n    \n    \n  )\n  \n}\n\n\n# MAke a Big Dataframe\n\nCombined <- left_join(pixar_films, public_response, by = \"film\") %>% \n  filter(!is.na(metacritic)) %>% \n  mutate(decade = floor(year(as.Date(release_date)) / 10) * 10, .after = release_date) %>% \n  group_by(decade) %>% \n  arrange(release_date) %>% \n  mutate(order_in_decade = row_number(),\n         decade = as.factor(decade)) %>% \n  rename(`Rotten Tomatoes` = rotten_tomatoes,\n         `MetaCritic` = metacritic,\n         `Critics Choice` = critics_choice)\n\n\nrating_columns <- c(\"MetaCritic\", \"Rotten Tomatoes\", \"Critics Choice\")\n\n\nlist_of_plots <- list()\n\nfor (rating in rating_columns) {\n  \n  heatmap_plot <- ggplot(Combined, aes(x = factor(decade), y = order_in_decade, fill = .data[[rating]])) +\n    geom_tile() +\n    scale_x_discrete(limits = sort(unique(Combined$decade))) +\n    geom_text(aes(label = paste0(str_wrap(film, 14), \"\\n\", round(.data[[rating]], 1))),\n              color = alpha(\"Black\", 1), size = 6, family = font) +\n    scale_fill_gradient(low = \"yellow\", high = \"darkgreen\") +\n    labs(\n      subtitle = paste(\"Heatmap of \", str_to_title(rating), \"Ratings\"),\n      x = \"Decade\",\n      y = \"Order in Decade \\n First film in each decade is at the bottom\",\n      fill = paste(str_to_title(rating), \"Rating\")\n    ) +\n    Custom_Style() +\n    theme(legend.position = \"right\")\n\n  list_of_plots <- list.append(list_of_plots, heatmap_plot)\n}\nfinal_patchwork <- wrap_plots(list_of_plots) &\n  theme(legend.position = \"bottom\") &\n  plot_annotation(\n    title = str_wrap('Comparison of Public and Critic Rating Systems for different Pixar films', 80),\n    subtitle = \"TidyTuesday: Week 10, 2025\",\n    theme = Custom_Style()\n  ) &\n  theme(\n    plot.subtitle = element_text(size = 16)\n  )\n\nprint(final_patchwork)\n```\n\n::: {.cell-output-display}\n![](TidyTues_Week10_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}