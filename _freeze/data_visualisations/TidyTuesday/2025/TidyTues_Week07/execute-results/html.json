{
  "hash": "969c411079c2c4a81e33f80a857652f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CDC Archive Data Analysis\"\nsubtitle: \"An Analysis of the CDC datasets archived/purged by the Trump administration\"\nauthor: \"Peter Gray\"\ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [tidytuesday, R, data visulation, ggplot2, patchwork, tidyverse]\nimage: \"thumbnails/TidyTues_Week07a.png\"\nformat:\n  html:\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Display code\"\n    self-contained: true\n    theme: solar\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n\n![Thumbnail](thumbnails/TidyTues_Week07a.png)\n\n#### R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set Up ------------------------------------------------------------------\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(survival)){install.packages(\"survival\"); library(survival)}\nif(!require(survminer)){install.packages(\"survminer\"); library(survminer)}\nif(!require(ggfortify)){install.packages(\"ggfortify\"); library(ggfortify)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(sysfonts)){install.packages(\"sysfonts\"); library(sysfonts)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\"); library(RColorBrewer)}\nif(!require(maps)){install.packages(\"maps\"); library(maps)}\nif(!require(sf)){install.packages(\"sf\"); library(sf)}\nif(!require(rlist)){install.packages(\"rlist\"); library(rlist)}\n\nwd <- getwd()\n\n\n\n# Graph Style -------------------------------------------------------------\n\n\n\nfont_add_google(\"Roboto Mono\", \"roboto_mono\")\nfont <- \"roboto_mono\"\nshowtext_auto()\n\n# Color palette\ncolor <- palette.colors(palette = \"Okabe-Ito\")\ncolor <- append(color, \"#40B0A6\")\ncolor[1] <- \"#D41159\"\n\n\nCustom_Style <- function() {\n  ggplot2::theme(\n    plot.title = ggplot2::element_text(family=font,\n                                       size=28,\n                                       face=\"bold\",\n                                       color=\"#222222\"),\n    plot.subtitle = ggplot2::element_text(family=font,\n                                          size=20,\n                                          color=\"#222222\"),\n    plot.caption = ggplot2::element_text(family=font,\n                                         size=12,\n                                         color=\"#222222\"),\n    \n    legend.position = \"bottom\",\n    legend.title = ggplot2::element_text(family=font, \n                                         size=12, \n                                         face=\"bold\", \n                                         color=\"#222222\"),\n    # legend.text.align = 0,\n    legend.key = ggplot2::element_blank(),\n    legend.text = ggplot2::element_text(family=font,\n                                        size=9,\n                                        color=\"#222222\"),\n    \n    # Axis format\n    axis.text = ggplot2::element_text(family = font,\n                                      size=10,\n                                      color=\"#222222\"),\n    axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size =8),\n    axis.line = ggplot2::element_line(colour = alpha('#222222', 0.5), size =0.5),\n    axis.title = ggplot2::element_text(family=font, \n                                       size=12, \n                                       face=\"bold\", \n                                       color=\"#222222\"),\n    \n    \n    # Grid lines\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major.y = ggplot2::element_blank(),\n    panel.grid.major.x = ggplot2::element_blank(),\n    \n    \n    \n    # Very pale cream/yellow background\n    panel.background = element_rect(fill = \"#FFFBF0\",  \n                                    color = \"#FFFBF0\", \n                                    linewidth = 0.5, \n                                    linetype = \"solid\"),\n    plot.background = element_rect(fill = \"#FFFBF0\",  \n                                   color = \"#FFFBF0\", \n                                   linewidth = 0.5, \n                                   linetype = \"solid\"),\n    legend.background = element_rect(fill = \"#FFFBF0\",  \n                                     color = \"#FFFBF0\", \n                                     linewidth = 0.5, \n                                     linetype = \"solid\"),\n    \n    \n  )\n}\n\n\n# Load the Data -----------------------------------------------------------\n\n\nagencies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-18/agencies.csv') %>% \n  mutate(is_nibrs = case_when(\n    is_nibrs == TRUE ~ \"Yes\",\n    is_nibrs == FALSE ~ \"No\",\n    TRUE ~ NA\n  ))\n\n\n# Simple Agency Graph -----------------------------------------------------\n\nstates <- c(\"New York\", \"Texas\", \"Massachusetts\", \"California\", \"Oklahoma\", \"Illinois\")\n\nAgencyType <-agencies %>% \n  filter(state %in% states) %>% \n  group_by(state, agency_type) %>% \n  summarise(n= n())\n\np1 <- AgencyType %>% \n  group_by(state) %>%  # Ensure percentage is calculated within each state\n  mutate(percent = n / sum(n)) %>%  # Compute percent per state\n  ggplot(aes(x = state, y = percent, fill = agency_type)) + \n  geom_bar(stat = \"identity\", position = \"fill\") +  \n  geom_text(aes(label = scales::percent(percent, accuracy = 1)),  \n            position = position_stack(vjust = 0.5),  \n            size = 3,  \n            family = font,  \n            color = \"black\") +  \n  labs(subtitle = str_wrap(\"The percentage of agencies reporting into the NIBRS by state\", 60), x = \"State\", y = \"Percent\", fill =\"State\") +  \n  Custom_Style() +  \n  scale_y_continuous(labels = scales::percent_format()) +  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n\n\n\n# Mapping PD reporting by Masseucsuttes, California New York versus Texas --------------------------------------------------------\n\npolice_data <- agencies %>% \n  select(longitude, latitude, state, is_nibrs, agency_type) %>% \n  filter(!is.na(longitude) & !is.na(latitude))  \n\nsf_data <- st_as_sf(police_data, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\nloop <- map_data(\"state\") %>% \n  filter(region %in% c(\"new york\", \"texas\", \"massachusetts\", \"california\", \"oklahoma\", \"illinois\")) %>% \n  arrange(region)\n\nstate <- unique(loop$region)\n\npolice_state <- sf_data %>% \n  mutate(state = tolower(state)) %>%  # Convert to lowercase\n  filter(state %in% c(\"new york\", \"texas\", \"massachusetts\", \"california\", \"oklahoma\", \"illinois\"))\n\npolicestate <- unique(police_state$state)\n\nlist_of_maps <- list()\ns=2\nfor (s in 1:length(state)) {\n  \n  # Ensure state filtering is correct\n  state_map <- map_data(\"state\") %>% \n    filter(region == state[s])\n  \n  police_filtered <- police_state %>% \n    filter(state == policestate[s])  # Use a fresh filter for each iteration\n  \n  p2 <- ggplot() +\n    geom_polygon(data = state_map, \n                 aes(x = long, y= lat, group = group), fill = color[4]) +\n    geom_sf(data = police_filtered, aes(color = is_nibrs), size = 0.2) +\n    labs(subtitle = str_to_title(state[s]),\n         x = \"Longitude\",\n         y = \"Latitude\",\n         fill = \"Density\",\n         color = \"Reports to NIBRS\") + \n    Custom_Style() +\n    scale_color_manual(values = c(color[1], color[2])) +\n    theme(\n      axis.line = element_blank(),\n      axis.ticks = element_blank(),\n      axis.title = element_blank(),\n      axis.text.x = element_blank(),\n      axis.text.y = element_blank(),\n      panel.grid = element_blank(),\n      plot.title = ggplot2::element_text(family=font,\n                                         size=20,\n                                         face=\"bold\",\n                                         color=\"#222222\")\n    )\n  \n  list_of_maps[[s]] <- p2\n}\n\ncombined <-  wrap_plots(list_of_maps)\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week07a.png\", \n  plot = combined, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/thumbnails/TidyTues_Week07b.png\", \n  plot = p1, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/TidyTues_Week07a.png\", \n  plot = combined, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n\n\nggsave(\n  filename = \"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/TidyTues_Week07b.png\", \n  plot = p1, \n  height = 1240 / 96,  # Converts 1240px to inches (assuming 96 DPI)\n  width = 1080 / 96,    # Converts 1080px to inches\n  dpi = 96,             # Set DPI to 96 to match pixel dimensions\n  units = \"in\",\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}