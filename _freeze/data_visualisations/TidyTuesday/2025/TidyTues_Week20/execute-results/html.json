{
  "hash": "1bff6eb49d564db534df000bcce81ad2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TidyTuesday Week 20: Water Quality at Sydney Beaches\"\nsubtitle: \"This week we're exploring the water quality of Sydney's iconic beaches. The data is available at the New South Wales State Government Beachwatch website. Beachwatch and our partners monitor water quality at swim sites to ensure that recreational water environments are managed as safely as possible so that as many people as possible can benefit from using the water.\"\nauthor: \"Peter Gray\"\ndate: \"2025-05-20\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [tidytuesday, R, data visulation, ggplot2, tidyverse]\nimage: \"thumbnails/TidyTues_Week20.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n\n![Chart](thumbnails/TidyTues_Week20.png){#fig-singlechart}\nWater Quality\n:::\n\n#### 1. R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the packages in ----------------------------------------------------\n\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(ggplot2)){install.packages(\"ggplot2\"); library(ggplot2)}\nif(!require(scales)){install.packages(\"scales\"); library(scales)}\nif(!require(RColorBrewer)){install.packages(\"RColorBrewer\"); library(RColorBrewer)}\n# I stick all my styling into a CUsotm PAckage to tidy up my code and keep it consistent over the time\nif(!require(CustomGGPlot2Theme)){devtools::install(\"CustomGGPlot2Theme\"); library(CustomGGPlot2Theme)}\n\n\n\nwater_quality <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-20/water_quality.csv')\nweather <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-20/weather.csv') %>% \n  select(-c(longitude, latitude))\nwater_quality$date <- as.Date(water_quality$date)\nweather$date <- as.Date(weather$date)\n\n# Remove specific years\n\ncombined <- left_join(water_quality, weather, by = \"date\") %>% \n  mutate(Year = year(date),\n         Month = month(date, label = T),\n         Day = day(date)) %>% \n  filter(Year >= 2000,\n         Year != 2025)\n\n\n# Average temperature by Year and Month\nstripes_data <- combined %>%\n  group_by(Year, Month) %>%\n  summarise(avg_temp = mean(max_temp_C, na.rm = TRUE),\n            average_bacteria = mean(enterococci_cfu_100ml, na.rm = T), \n            average_rain = mean(precipitation_mm, na.rm = T),.groups = \"drop\")\n\n\n# Fix error in mean calculation\nmaxmin <- range(stripes_data$avg_temp, na.rm = TRUE)\nmd <- mean(stripes_data$avg_temp, na.rm = TRUE)  # Fixed: was incorrectly referring to `stripes_data$stripes_data`\n\n# Color palette\ncol_strip <- brewer.pal(11, \"RdBu\")\ncol_strip <- adjustcolor(col_strip, alpha.f = 0.5)\n\n# Create a date column for plotting (necessary for proper x-axis handling)\n# Ensure Month is a factor for correct month ordering\n\n\nstripes_data$Month_num <- as.numeric(stripes_data$Month)\n# Compute the original ranges for correct inverse transformation\n# Compute the original ranges for correct inverse transformation\n# Compute the original ranges for correct inverse transformation\nrain_range <- range(stripes_data$average_rain, na.rm = TRUE)\nbac_range  <- range(stripes_data$average_bacteria, na.rm = TRUE)\n\np1 <- ggplot(stripes_data, aes(x = Month, y = 1, fill = avg_temp)) +\n  geom_tile(height = 0.4) +  # Explicit tile height kept for visibility\n  \n  scale_fill_gradientn(\n    colors = rev(col_strip),\n    values = rescale(c(maxmin[1], md, maxmin[2])),\n    na.value = \"gray80\"\n  ) +\n  \n  # Overlay bacteria as points – now with a mapping that creates a legend entry:\n  geom_point(\n    aes(\n      x = Month_num, \n      y = scales::rescale(average_bacteria, to = c(0.8, 1.2)),\n      color = \"Average Enterococci per 100ml\"  # This will create a legend key labeled \"Bacteria\"\n    ),\n    size = 0.5,\n    group = 1\n  ) +\n  geom_segment(aes(x = Month_num, xend = Month_num, y = 0.8, yend = scales::rescale(average_bacteria, to = c(0.8, 1.2))),\n               color = \"black\", size = 0.5) +\n  \n  # Overlay rainfall as a line – now with a mapping that creates a legend entry:\n  geom_line(\n    aes(\n      x = Month_num, \n      y = scales::rescale(average_rain, to = c(0.8, 1.2)),\n      color = \"Average Monthly Rainfall (mm)\"  # This will create a legend key labeled \"Rainfall\"\n    ),\n    size = 0.5,\n    group = 1\n  ) +\n  \n  labs(\n    title = str_wrap(\"Relationship between Average Enterococci per 100ml, Average Temperature, and Average Rainfall\", 70),\n    caption = \"Tidy Tuesday 2025 Week 20\",\n    x = \"Month\",\n    y = NULL,\n    fill = \"Avg Temp (°C)\"\n  ) +\n  \n  Custom_Style() +  # Use your pre-defined theme_strip, if available\n  theme(\n    panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5),\n    # Make facet label strips transparent:\n    strip.background = element_rect(fill = \"transparent\", color = NA)\n  ) +\n  \n  # Dual y-axis: left for rainfall, right for bacteria\n  scale_y_continuous(\n    name = \"Average Monthly Rainfall (mm)\",\n    limits = c(0.8, 1.2),\n    breaks = seq(0.8, 1.2, length.out = 5),\n    labels = function(x) {\n      # Inverse transformation for rainfall:\n      round((x - 0.8) / 0.4 * diff(rain_range) + rain_range[1], digits = 1)\n    },\n    sec.axis = sec_axis(\n      trans = ~ (. - 0.8) / 0.4 * diff(bac_range) + bac_range[1],\n      name = \"Average Enterococci per 100ml\"\n    )\n  ) +\n  scale_color_manual(\n    name = \"\",\n    values = c(\"Average Enterococci per 100ml\" = \"black\", \"Average Monthly Rainfall (mm)\" = \"blue\"),\n    guide = guide_legend(\n      override.aes = list(\n        linetype = c(0, 1),  \n        shape = c(16, NA)     \n      )\n    )\n  ) +\n  \n  facet_wrap(~ Year)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}