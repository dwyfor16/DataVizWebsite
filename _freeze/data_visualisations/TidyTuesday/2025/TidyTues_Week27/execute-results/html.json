{
  "hash": "fbffc3b739eb942fdf6e4414f073ee1f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"TidyTuesday Week 27: US Petrol Prices\"\nsubtitle: \"In 2010, the xkcd Color Survey asked hundreds of thousands of people to name colors they saw, revealing the different ways in which people perceive and label colors.\"\nauthor: \"Peter Gray\"\ndate: \"2025-07-08\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"Python Programming\" , \"2025\"]\ntags: [tidytuesday, R, data visulation, Python Programming, Pandas]\nimage: \"thumbnails/TidyTues_Week27.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n#### 1. Python code\n\n::: {#0bfeb812 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load the data\nanswers = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/answers.csv')\ncolor_ranks = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/color_ranks.csv')\nusers = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/users.csv')\n\nmaster = pd.merge(answers, users, on = \"user_id\", how = \"left\")\n\n\nmaster = master[master[\"spam_prob\"] <= 0.5]\n\n\ntop_20_hex_per_monitor = (\n    master.groupby([\"monitor\", \"hex\"])[\"rank\"]\n            .mean()\n            .reset_index()\n            .sort_values([\"monitor\", \"rank\"])\n            .groupby(\"monitor\")\n            .head(20)\n)\n\nfiltered_top = master.merge(\n    top_20_hex_per_monitor[[\"monitor\", \"hex\"]],\n    on=[\"monitor\", \"hex\"]\n)\n\n\ncounts = (\n    filtered_top.groupby([\"monitor\", \"hex\"])\n               .size()\n               .unstack(fill_value=0)\n)\n\n\npercentages = counts.div(counts.sum(axis=1), axis=0) * 100\n\nax = percentages.plot(\n    kind=\"bar\",\n    stacked=True,\n    figsize=(12, 6),\n    colormap=\"tab20\",\n    width=0.8\n)\n\n# Add percentage labels\nfor i, monitor in enumerate(percentages.index):\n    cumulative = 0\n    for hex_code in percentages.columns:\n        value = percentages.loc[monitor, hex_code]\n        if value >= 5:\n            ax.text(\n                i, cumulative + value / 2,\n                f\"{value:.0f}%\",\n                ha=\"center\", va=\"center\", fontsize=8, color=\"black\", rotation=90\n            )\n        cumulative += value\n\n# Formatting\nax.set_ylabel(\"Percentage of Top Colours\")\nax.set_title(\"Top 20 Colours per Monitor (by Frequency)\")\nax.legend(title=\"Hex Colour\", bbox_to_anchor=(1.05, 1), loc=\"upper left\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](TidyTues_Week27_files/figure-html/cell-2-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "TidyTues_Week27_files"
    ],
    "filters": [],
    "includes": {}
  }
}