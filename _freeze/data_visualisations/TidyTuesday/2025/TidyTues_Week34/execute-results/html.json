{
  "hash": "5b146c3535adf344f8dddd7620585572",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"TidyTuesday Week 33: Billboard Hot 100 Number Ones\"\nsubtitle: \"This week we are exploring the Billboard Hot 100 Number Ones Database. This workbook contains substantial data about every song to ever top the Billboard Hot 100 between August 4, 1958 and January 11, 2025.\"\nauthor: \"Peter Gray\"\ndate: \"2025-08-19\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"Python Programming\", \"2025\"]\ntags: [tidytuesday, Python, data visulation, ggplot2, tidyverse]\nimage: \"thumbnails/TidyTues_Week34.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n![Chart](thumbnails/TidyTues_Week34.png){#fig-singlechart}\nGraphs of the Billboard 100\n:::\n\n#### 1. Python code\n\n::: {#d5001e08 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom plotnine import *\nimport patchworklib as pl\n\nbillboard = pd.read_csv(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-08-26/billboard.csv\"\n)\ntopics = pd.read_csv(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-08-26/topics.csv\"\n)\n\nrock = billboard[billboard[\"cdr_genre\"] == \"Rock\"].copy()\n\nrock[\"rounded_rating\"] = np.rint(rock[\"overall_rating\"])\nrock[\"date\"] = pd.to_datetime(rock[\"date\"])\nrock[\"decade\"] = (rock[\"date\"].dt.year // 10) * 10\nrock[\"decade\"] = rock[\"decade\"].astype(\"category\")\n\n# Histogram of Ratings\nhist = pl.load_ggplot(\n    ggplot(data=rock)\n    + geom_histogram(\n        aes(x=\"rounded_rating\"), color=\"darkblue\", fill=\"lightblue\", bins=13\n    )\n    + theme_bw()\n    + theme(panel_grid=element_blank(), plot_title=element_text(margin={\"b\": 5}))\n    + scale_x_continuous(breaks=range(0, 11))\n    + labs(\n        title=\"Distribuiton of Ratings for Rock Songs that Reached Number One\",\n        x=\"Rating \\\\n (rounded to nearest integer)\",\n        y=\"Count\",\n    )\n)\n\n\n# Box Plot\nbox = pl.load_ggplot(\n    ggplot(rock)\n    + geom_boxplot(aes(x=\"decade\", y=\"rounded_rating\", fill=\"decade\"))\n    + theme_bw()\n    + theme(\n        panel_grid=element_blank(),\n        legend_position=\"bottom\",\n        legend_box_margin=0,\n        plot_title=element_text(margin={\"b\": 5}),\n    )\n    + labs(\n        title=\"Box plot of Rating of Rock Songs that Reached Number One\",\n        x=\"Decade\",\n        y=\"Rating \\n (rounded to nearest integer)\",\n        fill=\"Decade\",\n    )\n)\n\n\n# Top 10 bands with multiple Number ones\nartist_counts = rock[\"artist\"].value_counts()\ntop10 = artist_counts.head(10)\ntop10_df = top10.reset_index()\ntop10_df.columns = [\"artist\", \"count\"]\ntop10_df = top10_df.sort_values(by=\"count\", ascending=True)\ntop10_df[\"artist\"] = pd.Categorical(\n    top10_df[\"artist\"], categories=top10_df[\"artist\"], ordered=True\n)\ntop10_chart = pl.load_ggplot(\n    ggplot(top10_df)\n    + geom_bar(aes(x=\"artist\", y=\"count\"), stat=\"identity\", fill=\"steelblue\")\n    + geom_text(\n        aes(x=\"artist\", y=\"count + 0.5\", label=\"count\"),\n        va=\"center\",\n        format_string=\"{:.0f}\",\n        position=position_dodge(width=0.9),\n    )\n    + coord_flip()\n    + theme_bw()\n    + theme(panel_grid=element_blank())\n    + labs(\n        title=\"Top 10 Rock Artists by Number of Number 1 Songs\",\n        x=\"Artist\",\n        y=\"Number of Number 1 Hits\",\n    )\n)\n\n\n# Proportion of Cow Bell Used in Songs\ninstruments = rock[[\"cdr_genre\", \"cowbell\", \"accordion\", \"banjo\", \"clarinet\"]].copy()\n\ninstruments_long = instruments.melt(\n    id_vars=\"cdr_genre\", var_name=\"instrument\", value_name=\"present\"\n)\n\n\ncowbell_plot = pl.load_ggplot(\n    ggplot(\n        instruments_long.query(\"present == 1\"), aes(x=\"cdr_genre\", fill=\"instrument\")\n    )\n    + geom_bar(position=\"fill\", width=0.5)\n    + scale_y_continuous(labels=lambda l: [\"{:.0f}%\".format(v * 100) for v in l])\n    + labs(\n        title=\"Proportion of Instruments Used in Songs by Genre\",\n        x=\"Genre\",\n        y=\"Proportion of Songs\",\n        fill=\"Instrument\",\n    )\n    + theme_bw()\n    + theme(panel_grid=element_blank(), axis_text_x=element_text(rotation=45, hjust=1))\n)\n\n\ncombined = (hist | box) / (cowbell_plot | top10_chart)\n\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "TidyTues_Week34_files"
    ],
    "filters": [],
    "includes": {}
  }
}