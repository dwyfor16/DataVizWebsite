{
  "hash": "1ebea2ed3ac1ac65e9ce5561d9de118d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"TidyTuesday Week 14: Timely and Effective Care by US State\"\nsubtitle: \"This week we're exploring state-level results for medicare.gov 'timely and effective care' measurements. As of 2025-04-06, the data is available at the Centers for Medicare and Medicaid Services (CMS) website. Thanks to former TidyTuesday team member Tracy Teal (@tracykteal) for the dataset suggestion and the link to a visualization by Kayla Zhu and Christina Kostandi at the Visual Capitalist.\"\nauthor: \"Peter Gray\"\ndate: \"2025-04-08\" \ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [tidytuesday, R, data visulation, ggplot2, patchwork, tidyverse]\nimage: \"thumbnails/TidyTues_Week14.jpg\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: false\n    code-summary: \"Show code\"\n    self-contained: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n![Thumbnail 1](thumbnails/TidyTues_Week14.jpg){#fig-singlechart}\n#### 1. Python code\n\n::: {#faf55412 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport os\nimport geopandas as gpd\nfrom plotnine import (\n    ggplot,\n    aes,\n    coord_fixed,\n    facet_wrap,\n    geom_map,\n    geom_polygon,\n    geom_text,\n    labs,\n    scale_fill_brewer,\n    scale_fill_continuous,\n    scale_x_continuous,\n    scale_y_continuous,\n    scale_size_continuous,\n    stage,\n    coord_cartesian,\n    element_line,\n    element_rect,\n    element_text,\n    theme_void,\n    theme,\n)\nfrom shapely.geometry import Polygon, MultiPolygon\nfrom plotnine import scale_fill_gradient\n\n\npcare_state = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-08/care_state.csv')\n\n\n\n# Filter the data for Emergency Department and relevant states\nexcluded_states = [\"DC\", \"GU\", \"MH\", \"MP\", \"PR\", \"VI\", \"AS\", \"AL\", \"HI\"]\ned_data = pcare_state[\n    (pcare_state[\"condition\"] == \"Emergency Department\") &\n    (~pcare_state[\"state\"].isin(excluded_states)) &\n    (pcare_state[\"measure_id\"] == \"OP_22\")\n]\n\n# Load state boundary shapefile\nstate_data = gpd.read_file(\"~/Documents/Coding/Website/data_visualisations/TidyTuesday/2025/maps/ne_110m_admin_1_states_provinces.shp\")\nexcluded_states = [\"HI\", \"AK\"]  # Exclude Hawaii and Alaska\nstate_data = state_data[~state_data['postal'].isin(excluded_states)]\nstate_data = state_data[state_data['admin'] == 'United States of America']\n\n# Merge state boundaries with Emergency Department data\nstate_data['postal'] = state_data['postal'].str.upper()\nmerged_data = state_data.merge(ed_data, left_on=\"postal\", right_on=\"state\", how=\"left\")\n\n# Calculate the centroid of each state for text placement\nmerged_data['centroid'] = merged_data.geometry.centroid\nmerged_data['centroid_x'] = merged_data['centroid'].apply(lambda x: x.x)\nmerged_data['centroid_y'] = merged_data['centroid'].apply(lambda x: x.y)\n\n# Explode multi-part geometries into individual rows\nmerged_data = merged_data.explode(index_parts=False)\n\n# Extract polygon coordinates\ndef get_coords(row):\n    if isinstance(row.geometry, Polygon):\n        exterior = row.geometry.exterior.coords\n        return list(exterior)\n    elif isinstance(row.geometry, MultiPolygon):\n        # Take only the largest polygon (simplification)\n        largest_poly = max(row.geometry.geoms, key=lambda a: a.area)\n        return list(largest_poly.exterior.coords)\n    else:\n        return None\n\nmerged_data[\"coords\"] = merged_data.apply(get_coords, axis=1)\nmerged_data = merged_data.explode(\"coords\", ignore_index=True)\n\n# Create longitude and latitude columns\nmerged_data[\"longitude\"] = merged_data[\"coords\"].apply(lambda x: x[0])\nmerged_data[\"latitude\"] = merged_data[\"coords\"].apply(lambda x: x[1])\n\nmerged_data[\"score_label\"] = merged_data[\"score\"].apply(\n    lambda x: f\"{round(x)}%\" if pd.notnull(x) else \"\"\n)\n\n\n\n# Now plot\n\nplot = (\n    ggplot(merged_data)\n    + geom_polygon(\n        aes(x=\"longitude\", y=\"latitude\", group=\"postal\", fill=\"score\"),\n        color=\"black\"\n    )\n    + geom_text(\n        aes(x=\"centroid_x\", y=\"centroid_y\", label=\"score_label\"),\n        size=7,\n        color=\"black\"\n    )\n    + scale_fill_gradient(name=\"Percent\", low=\"#f1eef6\", high=\"#045a8d\")\n    + labs(\n        title=\"Percentage of Patients Who Left the\\nEmergency Department Before Being Seen\"\n    )\n    + coord_fixed()\n    + theme_void()\n    + theme(\n        legend_position=\"bottom\",\n        legend_title=element_text(size=10, weight=\"bold\"),\n        legend_text=element_text(size=8),\n        plot_title=element_text(size=14, weight=\"bold\")\n    )\n)\n\n```\n:::\n\n\n",
    "supporting": [
      "TidyTues_Week14_files"
    ],
    "filters": [],
    "includes": {}
  }
}