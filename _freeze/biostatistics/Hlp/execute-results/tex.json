{
  "hash": "927f37f9eec66e936801a5b6e9be05c6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat:\n  pdf:\n    geometry: a4paper, portrait\n    keep-tex: true\n    mainfont: \"Arial\"\n    fontsize: 10pt\nproject:\n  type: default\n  output-dir: \"Outputs\"\neditor_options: \n  chunk_output_type: console\nheader-includes:\n- \\usepackage{booktabs}\n- \\usepackage{longtable}\n- \\usepackage{array}\n- \\usepackage{multirow}\n- \\usepackage{wrapfig}\n- \\usepackage{float}\n- \\usepackage{colortbl}\n- \\usepackage{pdflscape}\n- \\usepackage{tabu}\n- \\usepackage{threeparttable}\n- \\usepackage{threeparttablex}\n- \\usepackage[normalem]{ulem}\n- \\usepackage{makecell}\n- \\usepackage{xcolor}\n---\n\n```{=latex}\n\\begin{titlepage}\n\\begin{center}\n\\includegraphics[width=2in,height=2in]{/home/pgr16/Documents/Coding/Pharma_Analysis/Images/logo.png} \\\\[2\\baselineskip]\n\\Huge\\textbf{Health Data Analysis Project - Data Cleaning} \\\\[1\\baselineskip]\n\\huge\\textbf{Peter Gray} \\\\[1\\baselineskip]\n\\LARGE{\\today} \\\\[1\\baselineskip]\n\\LARGE{Produced with Quarto and Python} \\\\[1\\baselineskip]\n\\end{center}\n\\end{titlepage}\n```\n\n```{=latex}\n\\clearpage\n\\tableofcontents\n\n\\clearpage\n\\addcontentsline{toc}{section}{List of Tables}\n\\listoftables\n\\addcontentsline{toc}{section}{List of Figures}\n\\listoffigures\n\\clearpage\n```\n\n```{=latex}\n\\section*{List of Python and R Packages}\n\\addcontentsline{toc}{section}{List of Python and R Packages}\n\\begin{center}\n\\begin{tabular}{ll}\n\\toprule\n\\textbf{Python} & \\textbf{R} \\\\\n\\midrule\nNumPy & tidyverse \\\\\nPandas & ggplot2 \\\\\nMatplotlib & gtsummary \\\\\nlifelines & \\\\\nrandom &  \\\\\nmiceforest &  \\\\\n\\bottomrule\n\\end{tabular}\n\\end{center}\n\\clearpage\n```\n\n\n# Data Cleaning \n## Import Data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Don't do Scientific notation\npd.options.display.float_format = \"{:.2f}\".format\n\ndemographics = pd.read_sas(\n    r\"/home/pgr16/Documents/Data_Analysis/Health_Data_Analysis/Data/DEMO_L.xpt\"\n)\n\nday_1_intake = pd.read_sas(\n    r\"/home/pgr16/Documents/Data_Analysis/Health_Data_Analysis/Data/DR1TOT_L.xpt\"\n)\n\nfood_codes = pd.read_sas(\n    r\"/home/pgr16/Documents/Data_Analysis/Health_Data_Analysis/Data/DRXFCD_L.xpt\"\n)\n\n```\n:::\n\n\n## Clean Data\n### Select Columns of Interest\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndm_columns  = [\"SEQN\", \"SDDSRVYR\", \"RIDSTATR\", \"RIDAGEYR\", \"RIAGENDR\",  \"RIDRETH1\", \"DMDBORN4\", \"DMDEDUC2\", \"DMDMARTZ\", \"WTINT2YR\"]\n\ndemographics = demographics[dm_columns]\n\nintake_columns = [\"SEQN\", \"WTDRD1\", \"WTDR2D\", \"DR1DRSTZ\", \"DRABF\", \"DR1DAY\", \"DR1MRESP\", \"DBD100\", \"DRQSPREP\", \"DR1TNUMF\", \"DRQSDIET\", \"DRQSDT1\", \"DRQSDT2\", \"DRQSDT3\", \"DRQSDT4\", \"DRQSDT5\", \"DRQSDT6\", \"DRQSDT11\", \"DR1TKCAL\", \"DR1TPROT\", \"DR1TCARB\", \"DR1TSUGR\", \"DR1TFIBE\" , \"DR1TTFAT\", \"DR1TSFAT\", \"DR1TMFAT\", \"DR1TPFAT\", \"DR1TCHOL\", \"DR1TCAFF\", \"DR1TALCO\", \"DR1_320Z\"]\n\nday_1_intake = day_1_intake[intake_columns]\n\nfood_code_columns = [\"DRXFDCD\", \"DRXFCSD\"]\n\nfood_codes = food_codes[food_code_columns]\n```\n:::\n\n\n### Rename Data Columns\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndemographics.rename(columns={\"SEQN\": \"SUBJID\", \"SDDSRVYR\" : \"CYCLE\", \"RIDAGEYR\" : \"AGE_YEARS_SCREENING\", \"RIDSTATR\": \"INTERVIEW_STATUS\", \"RIAGENDR\" : \"GENDER\",  \"RIDRETH1\": \"RACE\", \"DMDBORN4\" : \"BIRTH_COUNTRY\", \"DMDEDUC2\" : \"EDUCATION\", \"DMDMARTZ\": \"MARITAL_STATUS\", \"WTINT2YR\" : \"2_YEAR_WEIGHT\"}, inplace=True)\n\nday_1_intake.rename(columns={\"SEQN\": \"SUBJID\", \"WTDRD1\" : \"SAMPLE_WEIGHT_DAY1\", \"WTDR2D\" : \"SAMPLE_WEIGHT_DAY2\", \"DR1DRSTZ\" : \"RECALL_RELIABILITY\", \"DRABF\" : \"INFANT_BREAST_FED\", \"DR1DAY\" : \"INTAKE_DAY_WEEK\", \"DR1MRESP\": \"MAIN_RESPONDENT\", \"DBD100\" : \"SALT_AT_TABLE\", \"DRQSPREP\" : \"SALT_IN_PREP\", \"DRQSDIET\" : \"SPECIAL_DIET\" , \"DRQSDT1\" : \"WEIGHT_LOSS_DIET\", \"DRQSDT2\" : \"LOW_FAT_DIET\", \"DRQSDT3\" : \"LOW_SALT_DIET\", \"DRQSDT4\" : \"LOW_SUGER_DIET\", \"DRQSDT5\" : \"LOW_FIBER_DIET\", \"DRQSDT6\" : \"HIGH_FIBER_DIET\", \"DRQSDT11\" : \"CELIAC_DIET\", \"DR1TNUMF\" : \"NUMBER_FOOD_DRINKS\", \"DR1TKCAL\" : \"CALORIES\", \"DR1TPROT\" : \"NUT_PROTEIN_GRAMS\", \"DR1TCARB\" : \"NUT_CARBS_GRAMS\", \"DR1TSUGR\" : \"NUT_SUGAR_GRAMS\", \"DR1TFIBE\" : \"NUT_FIBRE_GRAMS\", \"DR1TTFAT\" : \"NUT_FAT_GRAMS\", \"DR1TSFAT\" : \"NUT_SAT_FAT_GRAMS\", \"DR1TMFAT\": \"NUT_MONO_SAT_FAT_GRAMS\", \"DR1TPFAT\" : \"NUT_POLY_SAT_FAT_GRAMS\", \"DR1TCHOL\" : \"NUT_CHOL_MILIGRAMS\", \"DR1TCAFF\" : \"NUT_CAFFEINE_MILIGRAMS\", \"DR1TALCO\": \"NUT_ALCOHOL_GRAMS\", \"DR1_320Z\" : \"TOTAL_WATER_DRANK\"}, inplace=True)\n\nfood_codes.rename(columns = {\"DRXFDCD\": \"FOOD_CODE\", \"DRXFCSD\" : \"FOOD_NAME\"}, inplace=True)\n\n#Remove Scientific Notation\nfood_codes['FOOD_CODE'] = food_codes['FOOD_CODE'].astype(str)\n```\n:::\n\n\n\\newpage \n\n### Rename Column Values\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Demogrpahics\n\ndemographics[\"INTERVIEW_STATUS\"] = np.where(demographics[\"INTERVIEW_STATUS\"]  == 1, \"Inteviewed Only\" , demographics[\"INTERVIEW_STATUS\"])\ndemographics[\"INTERVIEW_STATUS\"] = np.where(demographics[\"INTERVIEW_STATUS\"]  == \"2.0\", \"Inteviewed and Medically Exampined\" , demographics[\"INTERVIEW_STATUS\"])\n\n\ndemographics[\"GENDER\"] = np.where(demographics[\"GENDER\"]  == 1, \"Male\" , demographics[\"GENDER\"])\ndemographics[\"GENDER\"] = np.where(demographics[\"GENDER\"]  == \"2.0\", \"Female\" , demographics[\"GENDER\"])\n\ndemographics[\"RACE\"] = np.where(demographics[\"RACE\"]  == 1, \"Mexican American\" , demographics[\"RACE\"])\ndemographics[\"RACE\"] = np.where(demographics[\"RACE\"]  == \"2.0\", \"Other Hispanic\" , demographics[\"RACE\"])\ndemographics[\"RACE\"] = np.where(demographics[\"RACE\"]  == \"3.0\", \"Non-Hispanic White\" , demographics[\"RACE\"])\ndemographics[\"RACE\"] = np.where(demographics[\"RACE\"]  == \"4.0\", \"Non-Hispanic Black\" , demographics[\"RACE\"])\ndemographics[\"RACE\"] = np.where(demographics[\"RACE\"]  == \"5.0\", \"Other Race - Including Multi-Racial\" , demographics[\"RACE\"])\n\n\ndemographics[\"BIRTH_COUNTRY\"] = np.where(demographics[\"BIRTH_COUNTRY\"]  == 1, \"US\" , demographics[\"BIRTH_COUNTRY\"])\ndemographics[\"BIRTH_COUNTRY\"] = np.where(demographics[\"BIRTH_COUNTRY\"]  == \"2.0\", \"Others\" , demographics[\"BIRTH_COUNTRY\"])\ndemographics[\"BIRTH_COUNTRY\"] = np.where(demographics[\"BIRTH_COUNTRY\"]  == \"77\", \"Refused\" , demographics[\"BIRTH_COUNTRY\"])\ndemographics[\"BIRTH_COUNTRY\"] = np.where(demographics[\"BIRTH_COUNTRY\"]  == \"99\", \"Don't know\" , demographics[\"BIRTH_COUNTRY\"])\n\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == 1, \"Less than 9th grade\" , demographics[\"EDUCATION\"])\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == \"2.0\", \"9-11th grade (Includes 12th grade with no diploma)\" , demographics[\"EDUCATION\"])\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == \"3.0\", \"High school graduate/GED or equivalent\" , demographics[\"EDUCATION\"])\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == \"4.0\", \"Some college or AA degree\" , demographics[\"EDUCATION\"])\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == \"5.0\", \"College graduate or above\" , demographics[\"EDUCATION\"])\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == \"7.0\", \"Refused\" , demographics[\"EDUCATION\"])\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == \"9.0\", np.nan , demographics[\"EDUCATION\"])\ndemographics[\"EDUCATION\"] = np.where(demographics[\"EDUCATION\"]  == \"nan\", np.nan , demographics[\"EDUCATION\"])\n\n\ndemographics[\"MARITAL_STATUS\"] = np.where(demographics[\"MARITAL_STATUS\"]  == 1, \"Married/Living with partner\" , demographics[\"MARITAL_STATUS\"])\ndemographics[\"MARITAL_STATUS\"] = np.where(demographics[\"MARITAL_STATUS\"]  == \"2.0\", \"Widowed/Divorced/Separated\" , demographics[\"MARITAL_STATUS\"])\ndemographics[\"MARITAL_STATUS\"] = np.where(demographics[\"MARITAL_STATUS\"]  == \"3.0\", \"Never married\" , demographics[\"MARITAL_STATUS\"])\ndemographics[\"MARITAL_STATUS\"] = np.where(demographics[\"MARITAL_STATUS\"]  == \"77.0\", \"Refused\" , demographics[\"MARITAL_STATUS\"])\ndemographics[\"MARITAL_STATUS\"] = np.where(demographics[\"MARITAL_STATUS\"]  == \"99\", np.nan , demographics[\"MARITAL_STATUS\"])\ndemographics[\"MARITAL_STATUS\"] = np.where(demographics[\"MARITAL_STATUS\"]  == \"nan\", np.nan , demographics[\"MARITAL_STATUS\"])\n\n\n# Day 1 Intake\n\nday_1_intake[\"RECALL_RELIABILITY\"] = np.where(day_1_intake[\"RECALL_RELIABILITY\"] == 1, \"Reliable and met the minimum criteria\", day_1_intake[\"RECALL_RELIABILITY\"])\nday_1_intake[\"RECALL_RELIABILITY\"] = np.where(day_1_intake[\"RECALL_RELIABILITY\"] == \"2.0\", \"Not reliable or not met the minimum criteria\", day_1_intake[\"RECALL_RELIABILITY\"])\nday_1_intake[\"RECALL_RELIABILITY\"] = np.where(day_1_intake[\"RECALL_RELIABILITY\"] == \"3.0\", \"Reported consuming breast-milk\", day_1_intake[\"RECALL_RELIABILITY\"])\nday_1_intake[\"RECALL_RELIABILITY\"] = np.where(day_1_intake[\"RECALL_RELIABILITY\"] == \"4.0\", \"Reported consuming breast-milk\", day_1_intake[\"RECALL_RELIABILITY\"])\nday_1_intake[\"RECALL_RELIABILITY\"] = np.where(day_1_intake[\"RECALL_RELIABILITY\"] == \"5.0\", \"Not done\", day_1_intake[\"RECALL_RELIABILITY\"])\n\n\nday_1_intake[\"INFANT_BREAST_FED\"] = np.where(day_1_intake[\"INFANT_BREAST_FED\"] == 1, \"Yes\", day_1_intake[\"INFANT_BREAST_FED\"])\nday_1_intake[\"INFANT_BREAST_FED\"] = np.where(day_1_intake[\"INFANT_BREAST_FED\"] == \"2.0\", \"No\", day_1_intake[\"INFANT_BREAST_FED\"])\nday_1_intake[\"INFANT_BREAST_FED\"] = np.where(day_1_intake[\"INFANT_BREAST_FED\"]  == \"nan\", np.nan , day_1_intake[\"INFANT_BREAST_FED\"])\n\n\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"]  == 1, \"Sunday\" , day_1_intake[\"INTAKE_DAY_WEEK\"])\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"] == \"2.0\", \"Monday\", day_1_intake[\"INTAKE_DAY_WEEK\"])\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"] == \"3.0\", \"Tuesday\", day_1_intake[\"INTAKE_DAY_WEEK\"])\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"] == \"4.0\", \"Wednesday\", day_1_intake[\"INTAKE_DAY_WEEK\"])\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"] == \"5.0\", \"Thursday\", day_1_intake[\"INTAKE_DAY_WEEK\"])\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"] == \"6.0\", \"Friday\", day_1_intake[\"INTAKE_DAY_WEEK\"])\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"] == \"7.0\", \"Saturday\", day_1_intake[\"INTAKE_DAY_WEEK\"])\nday_1_intake[\"INTAKE_DAY_WEEK\"] = np.where(day_1_intake[\"INTAKE_DAY_WEEK\"]  == \"nan\", np.nan , day_1_intake[\"INTAKE_DAY_WEEK\"])\n\n\nrelationship_map = {\n    1: \"SP\",\n    2: \"Mother of SP\",\n    3: \"Father of SP\",\n    5: \"Spouse of SP\",\n    6: \"Child of SP\",\n    7: \"Grandparent of SP\",\n    8: \"Friend, partner, non-relative\",\n    9: \"Translator, not a HH member\",\n    10: \"Child care provider, caretaker\",\n    11: \"Other relative\",\n    77: \"Refused\",\n    99: np.nan\n}\n\nday_1_intake[\"MAIN_RESPONDENT\"] = day_1_intake[\"MAIN_RESPONDENT\"].map(relationship_map)\n\n\nsalt_usage_map = {\n    1: \"Ordinary salt\",\n    2: \"Lite salt\",\n    3: \"Salt substitute\",\n    4: \"Doesn't use or add salt products at the table\",\n    91: \"Other\",\n    99:  np.nan}\n\nday_1_intake[\"SALT_AT_TABLE\"] = day_1_intake[\"SALT_AT_TABLE\"].map(salt_usage_map)\n\n\nsalt_usage_table_map = {\n    1: \"Rarely\",\n    2: \"Occasionally\",\n    3: \"Very often\",\n    7: \"Refused\",\n    9: \"Don't know\",\n    99:  np.nan}\n\nday_1_intake[\"SALT_AT_TABLE\"] = day_1_intake[\"SALT_AT_TABLE\"].map(salt_usage_table_map)\n\nsalt_usage_prep_map = {\n    1: \"Never\",\n    2: \"Rarely\",\n    3: \"Occasionally\",\n    4: \"Very often\",\n    9: \"Don't know\",\n    99:  np.nan}\n\nday_1_intake[\"SALT_IN_PREP\"] = day_1_intake[\"SALT_IN_PREP\"].map(salt_usage_prep_map)\n\nday_1_intake[\"SPECIAL_DIET\"] = np.where(day_1_intake[\"SPECIAL_DIET\"]  == 1, \"Yes\" , day_1_intake[\"SPECIAL_DIET\"])\nday_1_intake[\"SPECIAL_DIET\"] = np.where(day_1_intake[\"SPECIAL_DIET\"]  == \"2.0\", \"No\" , day_1_intake[\"SPECIAL_DIET\"])\n\nday_1_intake[\"WEIGHT_LOSS_DIET\"] = np.where(day_1_intake[\"WEIGHT_LOSS_DIET\"]  == 1, \"Yes\" , day_1_intake[\"WEIGHT_LOSS_DIET\"])\nday_1_intake[\"WEIGHT_LOSS_DIET\"] = np.where(day_1_intake[\"WEIGHT_LOSS_DIET\"]  == \"nan\", np.nan , day_1_intake[\"WEIGHT_LOSS_DIET\"])\n\nday_1_intake[\"LOW_FAT_DIET\"] = np.where(day_1_intake[\"LOW_FAT_DIET\"]  == 2, \"Yes\" , day_1_intake[\"LOW_FAT_DIET\"])\nday_1_intake[\"LOW_FAT_DIET\"] = np.where(day_1_intake[\"LOW_FAT_DIET\"]  == \"nan\", np.nan , day_1_intake[\"LOW_FAT_DIET\"])\n\nday_1_intake[\"LOW_SALT_DIET\"] = np.where(day_1_intake[\"LOW_SALT_DIET\"]  == 3, \"Yes\" , day_1_intake[\"LOW_SALT_DIET\"])\nday_1_intake[\"LOW_SALT_DIET\"] = np.where(day_1_intake[\"LOW_SALT_DIET\"]  == \"nan\", np.nan , day_1_intake[\"LOW_SALT_DIET\"])\n\nday_1_intake[\"LOW_SUGER_DIET\"] = np.where(day_1_intake[\"LOW_SUGER_DIET\"]  == 4 ,\"Yes\" , day_1_intake[\"LOW_SALT_DIET\"])\nday_1_intake[\"LOW_SUGER_DIET\"] = np.where(day_1_intake[\"LOW_SUGER_DIET\"]  == \"nan\", np.nan , day_1_intake[\"LOW_SALT_DIET\"])\n\nday_1_intake[\"LOW_FIBER_DIET\"] = np.where(day_1_intake[\"LOW_FIBER_DIET\"]  == 5 ,\"Yes\" , day_1_intake[\"LOW_FIBER_DIET\"])\nday_1_intake[\"LOW_FIBER_DIET\"] = np.where(day_1_intake[\"LOW_FIBER_DIET\"]  == \"nan\", np.nan , day_1_intake[\"LOW_FIBER_DIET\"])\n\n\nday_1_intake[\"HIGH_FIBER_DIET\"] = np.where(day_1_intake[\"HIGH_FIBER_DIET\"]  == 6 ,\"Yes\" , day_1_intake[\"HIGH_FIBER_DIET\"])\nday_1_intake[\"HIGH_FIBER_DIET\"] = np.where(day_1_intake[\"HIGH_FIBER_DIET\"]  == \"nan\", np.nan , day_1_intake[\"HIGH_FIBER_DIET\"])\n\nday_1_intake[\"CELIAC_DIET\"] = np.where(day_1_intake[\"CELIAC_DIET\"]  == 6 ,\"Yes\" , day_1_intake[\"CELIAC_DIET\"])\nday_1_intake[\"CELIAC_DIET\"] = np.where(day_1_intake[\"CELIAC_DIET\"]  == \"nan\", np.nan , day_1_intake[\"CELIAC_DIET\"])\n\n```\n:::\n\n\n### Standardise Measurements \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nday_1_intake[\"TOTAL_WATER_DRANK\"] = day_1_intake[\"TOTAL_WATER_DRANK\"]/1000\n\nday_1_intake.rename(columns ={\"TOTAL_WATER_DRANK\": \"TOTAL_WATER_DRANK_LITRE\"}, inplace= True)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nmaster = pd.merge(demographics, day_1_intake, how=\"right\", on=\"SUBJID\")\n\nimport os\n\nmaster.to_csv(\n    r\"/home/pgr16/Documents/Data_Analysis/Health_Data_Analysis/Data/Master.csv\"\n)  \n```\n:::\n\n\n### Create Age Groups\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nconditions = [\n    master[\"AGE_YEARS_SCREENING\"] < 18,\n    (master[\"AGE_YEARS_SCREENING\"] >= 18) & (master[\"AGE_YEARS_SCREENING\"] <= 35),\n    (master[\"AGE_YEARS_SCREENING\"] > 35) & (master[\"AGE_YEARS_SCREENING\"] <= 60),\n    master[\"AGE_YEARS_SCREENING\"] > 60\n]\n\nchoices = [\n    \"Less than 18\",\n    \"18–35\",\n    \"36–60\",\n    \"Above 60\"\n]\n\nmaster[\"AGE_GROUP\"] = np.select(conditions, choices, default= \"NaN\")\n```\n:::\n\n\n\\newpage \n# Exploratory Analysis \n\n::: {.cell .fig-cap-location-top fig-height='15' fig-width='20' execution_count=8}\n``` {.python .cell-code}\nplt.figure()\nsns.heatmap(master.isnull(), cbar=False, cmap='viridis')\nplt.xlabel('Columns')\nplt.ylabel('Rows')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Missing Values Heatmap](Hlp_files/figure-pdf/cell-9-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell .fig-cap-location-top fig-height='15' fig-width='20' execution_count=9}\n``` {.python .cell-code}\nplt.figure()\nsns.pairplot(master)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1650x1050 with 0 Axes>\n```\n\nPairpolot of Data\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-10-output-2.png){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n### Visualisation of Categorical Variables\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ncategorical_columns = [\n    col for col in master.select_dtypes(include=[\"object\", \"category\"]).columns\n    if not col.endswith(\"_DIET\")\n]\n\n\n\nfor col in categorical_columns:\n\n    plt.figure(figsize=(10, 8))\n    master[col].value_counts(dropna=False).plot(kind='bar')\n    plt.title(f\"Distribution of {col.replace('_', ' ').title()}\")\n    plt.ylabel(\"Count\")\n    plt.xlabel(f\"{col.replace('_', ' ').title()}\")\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-1.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-2.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-3.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-4.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-5.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-6.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-7.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-8.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-9.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-10.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-11.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-12.png){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-11-output-13.png){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n# Data Analysis\n\n## Calorie Intake per Ethnicity\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom plotnine import * \n\ncalorie = master[master[\"RECALL_RELIABILITY\"]== \"Reliable and met the minimum criteria\"] \ncalorie = calorie[calorie[\"INFANT_BREAST_FED\"]== \"No\"] \n\ntitle = \"Boxplot of Calories per ethinc group\"\np1 = (\n  ggplot(calorie) +\n  geom_boxplot(aes(x = \"RACE\", y = \"CALORIES\", fill = \"RACE\")) +\n  theme_minimal() +\n  labs(title = title,\n  y = \"Calories (KCal)\",\n  x = \"Ethnicity\",\n  fill = \"Race\",\n   caption = \"Population comes from only the surverys classfied as 'Reliable and met the minimum criteria'\") +\n  theme(\n    axis_line_y=element_line(color=\"black\", size=0.5),\n    axis_line_x=element_line(color=\"black\", size=0.5),\n    axis_ticks_x=element_text(),\n    panel_grid_major=element_blank(),\n    panel_grid_minor=element_blank()\n  )\n\n\n)\n\np1\n```\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-12-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n### Box Plot of Calorie Intake per Age Group\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntitle = \"Boxplot of Calories per Age Group\"\n\np2 = (\n\n  ggplot(calorie) +\n  geom_boxplot(aes(x = \"AGE_GROUP\", y = \"CALORIES\", fill = \"AGE_GROUP\")) +\n  theme_minimal() +\n  labs(title = title,\n  y = \"Calories (KCal)\",\n  x = \"Age Group\",\n  fill = \"Age Group\",\n   caption = \"\\n Population comes from only the surverys classfied as 'Reliable and met the minimum criteria'\") +\n  theme(\n    axis_line_y=element_line(color=\"black\", size=0.5),\n    axis_line_x=element_line(color=\"black\", size=0.5),\n    axis_ticks_x=element_text(),\n    panel_grid_major=element_blank(),\n    panel_grid_minor=element_blank()\n  )\n\n\n\n)\n\np2\n```\n\n::: {.cell-output .cell-output-display}\n![](Hlp_files/figure-pdf/cell-13-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n\n# Weighted Analysis\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\n\ndef weighted_mean_versus_normal_mean(data, value_col, weight_col, characteristic=None):\n    weighted = (data[value_col] * data[weight_col]).sum() / data[weight_col].sum()\n    normal = data[value_col].mean()\n    thing = value_col.replace(\"NUT_\", \"\")\n    thing = thing.replace(\"_\", \" \").title()\n\n    if thing.endswith(\"Grams\"):\n        thing = thing.replace(\"Grams\", \"(g)\")\n    elif thing.endswith(\"Miligrams\"):\n        thing = thing.replace(\"Miligrams\", \"(mg)\")\n\n    return {\n        \"Characteristic\": thing,\n        \"Unweighted Mean\": round(normal, 2),\n        \"Weighted Mean\": round(weighted, 2),\n    }\n\n\nnutrient_cols = [\n    col for col in master if col.startswith((\"NUT_\",)) or col == \"SAMPLE_WEIGHT_DAY1\"\n]\n\nnutrient_cols\n\n\ntable = []\n\nfor col in nutrient_cols:\n    if col != \"SAMPLE_WEIGHT_DAY1\":  # skip weight column itself\n        result = weighted_mean_versus_normal_mean(\n            master, col, \"SAMPLE_WEIGHT_DAY1\", col\n        )\n        table.append(result)\n\ntable\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n[{'Characteristic': 'Protein (g)',\n  'Unweighted Mean': np.float64(70.66),\n  'Weighted Mean': np.float64(72.98)},\n {'Characteristic': 'Carbs (g)',\n  'Unweighted Mean': np.float64(223.91),\n  'Weighted Mean': np.float64(227.62)},\n {'Characteristic': 'Sugar (g)',\n  'Unweighted Mean': np.float64(97.06),\n  'Weighted Mean': np.float64(97.13)},\n {'Characteristic': 'Fibre (g)',\n  'Unweighted Mean': np.float64(15.52),\n  'Weighted Mean': np.float64(15.66)},\n {'Characteristic': 'Fat (g)',\n  'Unweighted Mean': np.float64(79.95),\n  'Weighted Mean': np.float64(82.08)},\n {'Characteristic': 'Sat Fat (g)',\n  'Unweighted Mean': np.float64(26.03),\n  'Weighted Mean': np.float64(26.75)},\n {'Characteristic': 'Mono Sat Fat (g)',\n  'Unweighted Mean': np.float64(26.89),\n  'Weighted Mean': np.float64(27.57)},\n {'Characteristic': 'Poly Sat Fat (g)',\n  'Unweighted Mean': np.float64(18.38),\n  'Weighted Mean': np.float64(18.86)},\n {'Characteristic': 'Chol (mg)',\n  'Unweighted Mean': np.float64(285.87),\n  'Weighted Mean': np.float64(296.91)},\n {'Characteristic': 'Caffeine (mg)',\n  'Unweighted Mean': np.float64(114.79),\n  'Weighted Mean': np.float64(116.0)},\n {'Characteristic': 'Alcohol (g)',\n  'Unweighted Mean': np.float64(5.5),\n  'Weighted Mean': np.float64(6.18)}]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Hlp_files"
    ],
    "filters": []
  }
}