{
  "hash": "95f5e9ef8cab5042eebeb9e012baadb1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simpsons Data Analysis\"\nsubtitle: \"An Analysis of the Simpsons data provided for Week 5 of Tidy Tuesday\"\nauthor: \"Peter Gray\"\ncategories: [\"TidyTuesday\", \"Data Visualization\", \"R Programming\", \"2025\"]\ntags: [tidytuesday, R, data visulation, ggplot2, patchwork, tidyverse, risk-analysis]\nimage: \"thumbnails/TidyTues_Week05.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n    theme: solar\neditor_options: \n  chunk_output_type: inline\nexecute: \n  freeze: true                                                  \n  cache: true                                                   \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n\n\\![Figure1\\](TidyTues_Week05.png){#fig-1}\n\n#### 1. R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the packages in ----------------------------------------------------\n\nif(!require(httr)){install.packages(\"httr\"); library(httr)}\nif(!require(jsonlite)){install.packages(\"jsonlite\"); library(jsonlite)}\nif(!require(withr)){install.packages(\"withr\"); library(withr)}\nif(!require(tidyverse)){install.packages(\"tidyverse\"); library(tidyverse)}\nif(!require(readxl)){install.packages(\"readxl\"); library(readxl)}\nif(!require(patchwork)){install.packages(\"patchwork\"); library(patchwork)}\nif(!require(gridExtra)){install.packages(\"gridExtra\"); library(gridExtra)}\nif(!require(grid)){install.packages(\"grid\"); library(grid)}\nif(!require(cowplot)){install.packages(\"cowplot\"); library(cowplot)}\nif(!require(showtext)){install.packages(\"showtext\"); library(showtext)}\nif(!require(ggpmisc)){install.packages(\"ggpmisc\"); library(ggpmisc)}\nif(!require(ggimage)){install.packages(\"ggimage\"); library(ggimage)}\nif(!require(jpeg)){install.packages(\"jpeg\"); library(jpeg)}\nif(!require(tinytex)){install.packages(\"tinytex\"); library(tinytex)}\n\n# get the wd\nwd <- getwd()\n\n\n# I have gone beyond the remit of the TidyTuesday and used the whole dataset --------\n# No one cares about the later seasons\n\n# Source for using full dataset: https://github.com/toddwschneider/flim-springfield\n# Define the metadata URL and fetch it\nmetadata_url <- \"www.kaggle.com/datasets/prashant111/the-simpsons-dataset/croissant/download\"\nresponse <- httr::GET(metadata_url)\n\n# Ensure the request succeeded\nif (httr::http_status(response)$category != \"Success\") {\n  stop(\"Failed to fetch metadata.\")\n}\n\n# Parse the metadata\nmetadata <- httr::content(response, as = \"parsed\", type = \"application/json\")\n\n# Locate the ZIP file URL\ndistribution <- metadata$distribution\nzip_url <- NULL\n\nfor (file in distribution) {\n  if (file$encodingFormat == \"application/zip\") {\n    zip_url <- file$contentUrl\n    break\n  }\n}\n\nif (is.null(zip_url)) {\n  stop(\"No ZIP file URL found in the metadata.\")\n}\n\n# Download the ZIP file. We'll use the withr package to make sure the downloaded\n# files get cleaned up when we're done.\ntemp_file <- withr::local_tempfile(fileext = \".zip\")\nutils::download.file(zip_url, temp_file, mode = \"wb\")\n\n# Unzip and read the CSV\nunzip_dir <- withr::local_tempdir()\nutils::unzip(temp_file, exdir = unzip_dir)\n\n# Locate the CSV file within the extracted contents\ncsv_file <- list.files(unzip_dir, pattern = \"\\\\.csv$\", full.names = TRUE)\n\nif (length(csv_file) == 0) {\n  stop(\"No CSV file found in the unzipped contents.\")\n}\n\n# Read the CSV into a dataframe\ncharacters <- read_csv(csv_file[1])\nepisodes <- read_csv(csv_file[2])\nlocations <- read_csv(csv_file[3])\nscript_lines <- read_csv(csv_file[4])\n\n\n\n\n# Load the font and define the theme --------------------------------------\n\n#| warning: false\n#| echo: FALSE\n#| message: false\n\nfont_add_google(\"Permanent Marker\")\nshowtext_auto()\n\n\n# Custom Theme - to emulate the simpson colour scheme of yellow and blue\ncustom_theme <- function() {\n  ggplot2::theme(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.title = element_text(size = 60, face = \"bold\", family = \"Permanent Marker\", color = \"#FFD90F\", hjust =  0.5),    \n    plot.subtitle = element_text(size = 48, face = \"bold\", family = \"Permanent Marker\", color = \"#FFD90F\"),    \n    plot.caption = element_text(size = 13,  family = \"Permanent Marker\", color = \"#FFD90F\"),    \n    axis.text = element_text(family = \"Permanent Marker\", size = 13, color = \"#FFD90F\"),   \n    axis.title.x = element_text(size = 32,  family = \"Permanent Marker\", color = \"#FFD90F\"), \n    axis.title.y = element_text(size = 32,  family = \"Permanent Marker\", color = \"#FFD90F\"), \n    axis.line = element_line(linewidth  = 0.5, colour = \"darkgrey\"),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 20,  family = \"Permanent Marker\", color = \"#FFD90F\"),\n    axis.text.y = element_text(angle = 45, hjust = 1, size = 20, family = \"Permanent Marker\", color = \"#FFD90F\"),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(), \n    panel.background = element_rect(fill = alpha(\"#009DDC\", 0.3),  \n                                    color = \"#009DDC\", \n                                    linewidth = 0.5, \n                                    linetype = \"solid\"),\n    plot.background = element_rect(fill = alpha(\"#009DDC\", 1),  \n                                   color = \"#009DDC\", \n                                   linewidth = 0.5, \n                                   linetype = \"solid\"),\n    legend.background = element_rect(fill = alpha(\"#009DDC\", 0.5),  \n                                     color = \"#009DDC\", \n                                     linewidth = 0.5, \n                                     linetype = \"solid\"),\n    legend.title = element_text(family = \"Permanent Marker\", size = 32, color = \"#FFD90F\"),\n    legend.text = element_text(family = \"Permanent Marker\", size = 32, color = \"#FFD90F\"),\n    legend.position = \"bottom\")\n}\n\n\n# Character Gender Split in the Simpsons --------------------------------------------\n\ngender <- characters %>% \n  select(gender) %>% \n  filter(!is.na(gender)) %>% \n  mutate(gender = str_to_upper(factor(gender)),\n         gender = case_when(gender == \"F\" ~ \"Female\", \n                            gender == \"M\" ~ \"Male\",\n                            TRUE ~ NA))\n\nbarchart_gender <- gender %>% \n  ggplot(aes(x = gender)) +\n  geom_bar(aes(fill = gender))  +\n  geom_text(stat = \"count\", aes(label = after_stat(paste0(\"n = \", count))), \n            vjust = 2, size = 15,  \n            family = \"Permanent Marker\", \n            color = \"#FFD90F\") +\n  scale_fill_brewer(palette = \"Set2\") +  # Use a nice color scheme\n  custom_theme() + \n  labs(subtitle = \"Character Gender Split\", y = \"Number\", fill = \"Gender\")\n\n\n# Heatmap of IMDB Ratings -------------------------------------------------\n\nheat <- episodes %>% \n  select(season, number_in_season, imdb_rating, title) %>%  \n  mutate(season = factor(season),\n         number_in_season = factor(number_in_season))\n# Build a table\n\nmax_rating <- max(heat$imdb_rating, na.rm = TRUE)\nmin_rating <- min(heat$imdb_rating, na.rm = TRUE)\n\n\nlow_rating <- heat %>%\n  filter(imdb_rating == min_rating)\nhigh_rating <- heat %>%\n  filter(imdb_rating == max_rating)\n\nhighlight_episodes <- heat %>%\n  filter(imdb_rating == max_rating | imdb_rating == min_rating) %>%\n  arrange(desc(imdb_rating)) \n\nhighlight_table <- data.frame(\n  `Episode Name` = highlight_episodes$title,\n  `Season` = highlight_episodes$season,\n  `IMDB Rating` = round(highlight_episodes$imdb_rating, 1),\n  check.names=FALSE\n)\n\n#Only way I could work out how to do this to add a title to the table above\n\ntitle_table <- data.frame(matrix(ncol = 1, nrow = 1))\n\ncolnames(title_table) = \"Highest and Lowest Rated Episodes\"\n\ntitle_table[is.na(title_table)] <- \"\"\n\nheatmap_episode <- ggplot(heat, aes(x = season, y = number_in_season, fill = imdb_rating)) +\n  geom_tile() +\n  geom_text(aes(label = round(imdb_rating, 1)),  \n            color = alpha(\"Black\", 0.5),  \n            size = 8,  \n            family = \"Permanent Marker\") +\n  scale_fill_gradient(low = \"firebrick2\", high = \"yellow\", limits = c(4,10)) +  \n  labs(\n    subtitle = \"Heatmap of Episode IMDB Ratings\", \n    x = \"Season Number\",  \n    y = \"Episode Number\", \n    fill = \"IMDB Rating\",\n    caption = \"Grey indicated data not available\") +\n  custom_theme() + \n  theme(legend.position = \"right\") +\n  geom_tile(data = low_rating, \n            aes(x = season, y = number_in_season), \n            color = \"darkred\",\n            linewidth = 1, \n            fill = NA)  + \n  geom_tile(data = high_rating, \n            aes(x = season, y = number_in_season), \n            color = \"darkgreen\",\n            linewidth = 1, \n            fill = NA) +\n  # Add a Table to the graph\n  annotate(geom = \"table\", x = 20, y = 30, label = list(highlight_table), \n           vjust = 1, hjust = 0, family = \"Permanent Marker\", color = alpha(\"black\", 0.5),\n           table.theme = ttheme_minimal(title = \"Highest and Lowest Rated Episodes\",\n                                        base_colour = \"#FFD90F\", base_family = \"Permanent Marker\", color = \"#009DDC\",base_size = 20,\n                                        core=list(bg_params = list(fill = \"#009DDC\")), \n                                        colhead = list(bg_params = list(fill = \"#009DDC\")))) + \n  # Add a table title to the graph (Messy but)\n  annotate(geom = \"table\", x = 20.5, y = 33, label = list(title_table), \n           vjust = 1, hjust = 0, family = \"Permanent Marker\", color = alpha(\"black\", 0.5),\n           table.theme = ttheme_minimal(title = \"Highest and Lowest Rated Episodes\",\n                                        base_colour = \"#FFD90F\", base_family = \"Permanent Marker\", base_size = 20, color = \"#009DDC\",\n                                        core=list(bg_params = list(fill = \"#009DDC\")), \n                                        colhead = list(bg_params = list(fill = \"#009DDC\"))))\n\n\n\n\n# Boxplot of viewership over time -----------------------------------------\n\n\nviewers <- episodes %>% \n  select(season, us_viewers_in_millions) %>% \n  group_by(season) %>% \n  summarise(mean = mean(us_viewers_in_millions),\n            sd =  sd(us_viewers_in_millions),\n            n = n(),\n            se = sd/sqrt(n), \n            lci = mean - qt(1 - (0.05 / 2), n - 1) * se, \n            uci = mean + qt(1 - (0.05 / 2), n - 1) * se)\n\nboxplot_viewers <- ggplot(episodes, aes(x = factor(season), y = us_viewers_in_millions)) +\n  geom_boxplot(fill = alpha(\"firebrick2\", 0.9), color = \"black\", outlier.shape = NA) +  \n  geom_smooth(method = \"lm\", se=FALSE, color= \"#F2E86D\", aes(group=1)) +\n  labs(\n    subtitle = \"US Viewership per Season\",\n    x = \"Season Number\",\n    y = \"US Viewers (Millions)\",\n    caption = \"Yellow Line: Trendline derived from Linear Model\"\n  ) +\n  custom_theme() +\n  theme(plot.caption = element_text(hjust = 0))\n\nwd <- getwd()\n\n\nfig_dir <- paste0(wd, \"/1. Data/1. Images/\")\n\nlines <-script_lines %>% \n  filter(speaking_line == T) %>% \n  rename(Character = raw_character_text) %>% \n  select(Character, word_count) %>% \n  group_by(Character) %>%\n  summarise(n = n())  %>% \n  arrange(desc(n)) %>%  \n  slice(1:10)  %>% \n  mutate(image = case_when(\n    Character ==  \"Homer Simpson\" ~ paste0(fig_dir, \"Homer.png\"),\n    Character ==  \"Marge Simpson\" ~ paste0(fig_dir, \"Marge_Simpson.png\"),\n    Character ==  \"Bart Simpson\" ~ paste0(fig_dir, \"Bart_Simpson_200px.png\"),\n    Character ==  \"Lisa Simpson\" ~ paste0(fig_dir, \"Lisa_Simpson.png\"),\n    Character ==  \"C. Montgomery Burns\" ~ paste0(fig_dir, \"Mr_Burns.png\"),\n    Character ==  \"Moe Szyslak\" ~ paste0(fig_dir, \"Moe_Szyslak.png\"),\n    Character ==  \"Seymour Skinner\" ~ paste0(fig_dir, \"Seymour_Skinner.png\"),\n    Character ==  \"Ned Flanders\" ~ paste0(fig_dir, \"Ned_Flanders.png\"),\n    Character ==  \"Grampa Simpson\" ~ paste0(fig_dir, \"Abe_Simpson.png\"),\n    Character ==  \"Chief Wiggum\" ~ paste0(fig_dir, \"Chief_Wiggum.png\")))\n\n\nbarchart_lines <- lines %>% \n  ggplot(aes(x = reorder(Character, n), y = n, fill = Character)) +  \n  geom_bar(stat = \"identity\") +  \n  geom_image(aes(x = Character, y = -max(n) * 0.05, image = image), \n             size = 0.04, asp = 1) +  \n  geom_text(aes(label = paste0(\"n = \", n), y=n/1.5),  # looks the best\n            hjust= -0.5,\n            position = position_dodge(width = .25),\n            size = 10,  \n            family = \"Permanent Marker\", \n            color = \"#FFD90F\") +\n  coord_flip() + \n  labs(x = \"\", y = \"Number of Lines\", subtitle = \"Most Spoken Lines per Character\") +  \n  custom_theme() +\n  theme(\n    axis.text.y = element_blank(),  \n    axis.ticks.y = element_blank(), \n    legend.position = \"none\"\n  )\n\n\n\n# Combine all the charts and save them in an outputs folder ---------------\n\n\n\n\n\ncombined <- (barchart_gender + boxplot_viewers + barchart_lines) / heatmap_episode +\n  plot_annotation(title = 'The Simpsons',\n                  caption = \"TidyTuesday: Week 5, 2025\",\n                  theme = custom_theme()) +\n  theme(caption = element_text(hjust =  0.5))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}