---
title: "Time to Event Analysis: Efficacy Endpoints"
format:
  pdf:
    geometry: a4paper, portrait
    keep-tex: true
    lof: true
    lot: true
    mainfont: "Times New Roman"
    fontsize: 8pt
project:
  type: default
  output-dir: "Outputs"
editor_options: 
  chunk_output_type: console
header-includes:
- \usepackage{booktabs}
- \usepackage{longtable}
- \usepackage{array}
- \usepackage{multirow}
- \usepackage{wrapfig}
- \usepackage{float}
- \usepackage{colortbl}
- \usepackage{pdflscape}
- \usepackage{tabu}
- \usepackage{threeparttable}
- \usepackage{threeparttablex}
- \usepackage[normalem]{ulem}
- \usepackage{makecell}
- \usepackage{xcolor}
---
\newpage

```{r, load the stuff in}
#| echo: false
#| message: false

if(!require(tidyverse)){install.packages("tidyverse"); library(tidyverse)}
if(!require(epitools)){install.packages("epitools"); library(epitools)}
if(!require(epiR)){install.packages("epiR"); library(epiR)}
if(!require(survminer)){install.packages("survminer"); library(survminer)}
if(!require(kableExtra)){install.packages("kableExtra"); library(kableExtra)}
if(!require(knitr)){install.packages("knitr"); library(knitr)}
if(!require(gt)){install.packages("gt"); library(gt)}

source("~/Experiments/R/Pharmaverse/Scripts/00 Functions/Functions.R")

clean_up()

load("~/Experiments/R/Pharmaverse/Data/Data_Processed.RDS")

rm(list=setdiff(ls(), c("adtte", "clean_up")))

```

```{r, Kaplan Meier Curves}
#| echo: false
#| fig-width: 9
#| fig-height: 6
#| fig-dpi: 300
#| results: asis

#ITT Population check and create an Event Column 

adtte <- adtte %>% 
  filter(ITTFL == "Y") %>% 
  mutate(Evt = case_when(
    CNSR == 0 ~ 1, 
    CNSR == 1 ~ 0,
    TRUE ~ NA
  )) %>% 
  relocate(Evt, .before = CNSR)



endpts <- unique(adtte$PARAM)

e=1 

for (e in 1:length(endpts)){
  
  dat <- adtte %>% 
    filter(PARAM == endpts[e]) 
  
  # Empty Data frames and Variables for the Analysis
  NEvt = data.frame('Treatment' = NA, 'N.eligible' = NA, 'Evt' = NA, 'RR' = NA, 'LCL.RR' = NA, 'UCL.RR' = NA, 
                    'OR' = NA, 'LCL.OR' = NA, 'UCL.OR' = NA, 
                    'RD' = NA, 'LCL.RD' = NA, 'UCL.RD' = NA, 'p.fisher' = NA, 'p.barnard' = NA)
  noEvt = 0
  AEFilter = 0
  time = NULL
  fup  = NULL
  hr   = NULL
  logrank = data.frame('Log-rank Test' = NA, 'Treatment' = NA)
  KM  = data.frame('median' = NA, '0.95LCL' = NA, '0.95UCL' = NA, 'Treatment' = NA, 'AD' = NA)
  FUP = data.frame('median' = NA, '0.95LCL' = NA, '0.95UCL' = NA, 'Treatment' = NA)
  HR  = data.frame('exp.(coef)' = NA, 'lower .95' = NA, 'upper .95' = NA, 'Treatment' = NA)
  scoretest = data.frame('Score Test' = NA, 'Treatment' = NA)
  foo = NULL
  
  # Because we have three arms we need to go through and analysis each Treatment arm versus placebo
  
  trts <- unique(dat$TRT01P[dat$TRT01P != "Placebo"])
  
  t = 1
  
  for (t in 1:length(trts)){
    
    res <- data.frame()
    
    dat_trts <- dat %>% 
      filter(TRT01P == trts[t] | TRT01P == "Placebo") %>% 
      mutate(Treatment = relevel(as.factor(TRT01P), ref = "Placebo"))
    
    #Need for Later
    
    master = dat_trts %>%
      filter(ITTFL == "Y") %>% 
      group_by(Treatment) %>%  
      summarise(Treatment = first(TRT01P), N.Pop = n())
    
    error0 = try({NEvt = dat_trts %>%   
      group_by(Treatment) %>% 
      summarise(N.eligible = n_distinct(USUBJID), 
                Evt = sum(Evt))}, silent = T) 
    
    
    # Build a table ready for epi.tools
    TAB = NEvt %>% mutate(CNSR = N.eligible - Evt) %>% 
      arrange(desc(Treatment)) %>% 
      dplyr::select(Treatment, Evt, CNSR, N.eligible) 
    
    # Needed to make the calcualtions easier
    
    if(any(TAB$Evt == 0)){
      
      TAB <- TAB %>% 
        mutate(Evt = Evt + 0.5,
               CNSR = CNSR + 0.5,
               N.eligible = N.eligible + 1)
    }
    
    #Draw the 2 by 2 table
    vec = c(TAB$Evt[1], TAB$CNSR[1], TAB$Evt[2], TAB$CNSR[2])
    
    RR_OR_RD = epi.2by2(vec, method = 'cohort.count')$massoc.summary[1:3,]
    
    
    RR = RR_OR_RD[1, 2:4]
    RR$Treatment = trts[t]
    names(RR) = c('RR', 'LCL.RR', 'UCL.RR', 'Treatment')
    OR = RR_OR_RD[2, 2:4]
    OR$Treatment = trts[t]
    names(OR) = c('OR', 'LCL.OR', 'UCL.OR', 'Treatment')
    RD = RR_OR_RD[3, 2:4]
    RD$Treatment = trts[t]
    names(RD) = c('RD', 'LCL.RD', 'UCL.RD', 'Treatment')
    
    p.fisher = data.frame('p.fisher' = fisher.test(TAB[,2:3])$p.value, 'Treatment' =  trts[t])
    
    NEvt = NEvt %>% 
      left_join(RR, by = 'Treatment') %>% 
      left_join(OR, by = 'Treatment') %>% 
      left_join(RD, by = 'Treatment') %>% 
      left_join(p.fisher, by = 'Treatment')
    
    
    # Event- and FUP-Time = Reverse KM sowie HR schätzen.
    error1 = try({time   <- survfit(Surv(AVAL, Evt)     ~ Treatment, data = dat_trts)}, silent = T)
    error2 = try(fup    <- survfit(Surv(AVAL, CNSR) ~ Treatment, data = dat_trts), silent = T)
    error3 = try(hr     <- coxph(Surv(AVAL, Evt)       ~ Treatment, data = dat_trts), silent = T)
    
    
    if(sum(NEvt$Evt) == 0 | is.na(sum(NEvt$Evt))){
      noEvt = 1
    }
    
    #Build the Kaplan-Meier Curves
    
    if (!is.null(time)){
      
      
      KM = as.data.frame(summary(time)$table)
      
      #Check we have the appropriate number of columns
      if(ncol(KM) == 9){
        KM = subset(KM, select = -c(1, 2, 3, 4, 5, 6))
        KM$Treatment[row.names(KM) == 'Treatment=Placebo'] = "Placebo"
        KM$Treatment[row.names(KM) == paste0('Treatment=',trts[t])] = trts[t]
        KM$AD[KM$Treatment == trts[t]] = KM[KM$Treatment == trts[t], 1] - KM[KM$Treatment == "Placebo", 1]
        if (noEvt == 0){
          logrank <- as.data.frame(surv_pvalue(time)$pval)
          names(logrank) = 'Log-rank Test'
          logrank$Treatment = trts[t]
        }
        
        
        
        title = paste0(str_to_title(endpts[e]),":- ", str_to_title(trts[t]))
        subtitle = '(MITT Set)'
        # device öffnen
        
        foo = ggsurvplot(time, data = dat_trts, risk.table = T, palette = 'lancet', ggtheme = theme_pubclean(),
                         title = str_wrap(title, 70),
                         pval = T,
                         subtitle = paste0(subtitle),
                         legend.title = 'Treatment',
                         legend.labs = c("Placebo", trts[t]),
                         risk.table.y.text = F,
                         risk.table.title = 'Number at risk',
                         ylab = 'Probability of no event', xlab = 'Time since therapy start (Days)',
                         break.time.by = 180)
        print(foo)
        
        #Add in a page break
        cat('\n\\newpage\n')
        
      }
      
      # Calcuation of Follow Up
      
      if (!is.null(fup)){
        FUP = as.data.frame(summary(fup)$table)
        
        if (ncol(FUP) == 9){
          FUP <- FUP %>% 
            select(median, `0.95LCL`, `0.95UCL`)
          
          FUP$Treatment[row.names(FUP) == 'Treatment=Placebo'] = "Placebo"
          FUP$Treatment[row.names(FUP) == paste0('Treatment=',trts[t])] = trts[t]
          # falls nicht, wird ein leerer dataframe geschrieben
        } else {
          FUP = data.frame('median' = NA, '0.95LCL' = NA, '0.95UCL' = NA, 'Treatment' = NA)
        }
        
        # Calucate the Hazard Rtio and the score test
        
        if (!is.null(hr)){
          HR = as.data.frame(summary(hr)$conf.int)
          if (ncol(HR) == 4){
            HR <- HR %>% 
              select(-c(`exp(-coef)`))
            HR$Treatment = trts[t]
            scoretest = as.data.frame(summary(hr)$sctest[3])
            names(scoretest) = 'Score Test'
            scoretest$Treatment = trts[t]
          }else {
            HR = data.frame('exp.(coef)' = NA, 'lower .95' = NA, 'upper .95' = NA, 'Treatment' = NA)
            scoretest = data.frame('Score Test' = NA, 'Treatment' = NA)
          }
        } 
        
        # Make as nice title 
        cat(paste0(trts[t]))
        
        # Create the table 
        RRORRD <- merge(master, NEvt, by = 'Treatment', all.x = TRUE) %>%
          mutate(across(where(is.numeric), ~ round(.x, 2)))
        
        names(RRORRD) = c('Treatment', 'N', 'Eligible', 'Evt', 
                          'RR', 'LCL.RR', 'UCL.RR', 'OR', 'LCL.OR', 'UCL.OR', 'RD', 'LCL.RD', 'UCL.RD', 'p.fisher')
        
        print(kable(RRORRD, booktabs = TRUE, longtable =T, caption = paste0("Risk Ratio, Odds Ratio, and Risk Difference for ", title))) 
        cat('\n\n<!-- -->\n\n')
        
        #KM
        KaplanMeier = merge(master, KM,      by = 'Treatment', all.x = T)
        
        KaplanMeier = merge(KaplanMeier, logrank,      by = 'Treatment', all.x = T) %>%
          mutate(across(where(is.numeric), ~ round(.x, 2)))
        names(KaplanMeier) = c('Treatment', 'N.Pop', 'Median.S', 'LCL.S', 'UCL.S', 'Absolute Difference', 'p.logrank')
        
        print(kable(KaplanMeier, booktabs = TRUE, caption = paste0("Median time to Event and log rank test for ", title)))
        
        cat('\n\n<!-- -->\n\n')
        
        #Hazard Ratio
        HazardRatio = merge(master, HR,        by = 'Treatment', all.x = T)
        HazardRatio = merge(HazardRatio, scoretest,        by = 'Treatment', all.x = T)
        HazardRatio = merge(HazardRatio, FUP,        by = 'Treatment', all.x = T) %>%
          mutate(across(where(is.numeric), ~ round(.x, 2)))
        names(HazardRatio) <- c('Treatment', 'N','Hazard Ratio', 'Hazard Ratio LCI', 'Hazard Ratio UCI', 'p.scoretest', 'Median Follow Up', 'Follow Up LCI', 'Follow Up UCI')
        
        print(kable(HazardRatio, booktabs = TRUE, caption = paste0("Hazard Ratio for ", title)))
        
        cat('\n\n<!-- -->\n\n')
        cat('\n\\newpage\n')
        
        
        
      } 
      
    }
  }
}


```
